<?php
/**
 * TimeSheetSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TimeSheetSettings Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeSheetSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimeSheetSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'replacement_required' => 'bool',
        'ips_whitelist' => 'string[]',
        'minutes_to_hour' => 'int',
        'paid_leave_of_absence' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'replacement_required' => null,
        'ips_whitelist' => 'ipv4',
        'minutes_to_hour' => null,
        'paid_leave_of_absence' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'replacement_required' => 'replacement_required',
        'ips_whitelist' => 'ips_whitelist',
        'minutes_to_hour' => 'minutes_to_hour',
        'paid_leave_of_absence' => 'paid_leave_of_absence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'replacement_required' => 'setReplacementRequired',
        'ips_whitelist' => 'setIpsWhitelist',
        'minutes_to_hour' => 'setMinutesToHour',
        'paid_leave_of_absence' => 'setPaidLeaveOfAbsence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'replacement_required' => 'getReplacementRequired',
        'ips_whitelist' => 'getIpsWhitelist',
        'minutes_to_hour' => 'getMinutesToHour',
        'paid_leave_of_absence' => 'getPaidLeaveOfAbsence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['replacement_required'] = isset($data['replacement_required']) ? $data['replacement_required'] : false;
        $this->container['ips_whitelist'] = isset($data['ips_whitelist']) ? $data['ips_whitelist'] : null;
        $this->container['minutes_to_hour'] = isset($data['minutes_to_hour']) ? $data['minutes_to_hour'] : null;
        $this->container['paid_leave_of_absence'] = isset($data['paid_leave_of_absence']) ? $data['paid_leave_of_absence'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['minutes_to_hour']) && ($this->container['minutes_to_hour'] > 60)) {
            $invalidProperties[] = "invalid value for 'minutes_to_hour', must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['minutes_to_hour']) && ($this->container['minutes_to_hour'] < 1)) {
            $invalidProperties[] = "invalid value for 'minutes_to_hour', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets replacement_required
     *
     * @return bool
     */
    public function getReplacementRequired()
    {
        return $this->container['replacement_required'];
    }

    /**
     * Sets replacement_required
     *
     * @param bool $replacement_required replacement_required
     *
     * @return $this
     */
    public function setReplacementRequired($replacement_required)
    {
        $this->container['replacement_required'] = $replacement_required;

        return $this;
    }

    /**
     * Gets ips_whitelist
     *
     * @return string[]
     */
    public function getIpsWhitelist()
    {
        return $this->container['ips_whitelist'];
    }

    /**
     * Sets ips_whitelist
     *
     * @param string[] $ips_whitelist 
     *
     * @return $this
     */
    public function setIpsWhitelist($ips_whitelist)
    {
        $this->container['ips_whitelist'] = $ips_whitelist;

        return $this;
    }

    /**
     * Gets minutes_to_hour
     *
     * @return int
     */
    public function getMinutesToHour()
    {
        return $this->container['minutes_to_hour'];
    }

    /**
     * Sets minutes_to_hour
     *
     * @param int $minutes_to_hour minutes_to_hour
     *
     * @return $this
     */
    public function setMinutesToHour($minutes_to_hour)
    {

        if (!is_null($minutes_to_hour) && ($minutes_to_hour > 60)) {
            throw new \InvalidArgumentException('invalid value for $minutes_to_hour when calling TimeSheetSettings., must be smaller than or equal to 60.');
        }
        if (!is_null($minutes_to_hour) && ($minutes_to_hour < 1)) {
            throw new \InvalidArgumentException('invalid value for $minutes_to_hour when calling TimeSheetSettings., must be bigger than or equal to 1.');
        }

        $this->container['minutes_to_hour'] = $minutes_to_hour;

        return $this;
    }

    /**
     * Gets paid_leave_of_absence
     *
     * @return bool
     */
    public function getPaidLeaveOfAbsence()
    {
        return $this->container['paid_leave_of_absence'];
    }

    /**
     * Sets paid_leave_of_absence
     *
     * @param bool $paid_leave_of_absence paid_leave_of_absence
     *
     * @return $this
     */
    public function setPaidLeaveOfAbsence($paid_leave_of_absence)
    {
        $this->container['paid_leave_of_absence'] = $paid_leave_of_absence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


