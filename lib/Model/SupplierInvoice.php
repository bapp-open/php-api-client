<?php
/**
 * SupplierInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SupplierInvoice Class Doc Comment
 *
 * @category Class
 * @description SupplierInvoice(id, created_at, modified_at, snapshot, company, partner, location, currency, language, delegate, uuid, number, date, due_days, status, observations, due_date, discount, has_discount, subtotal, subtotal_currency, tax_value, tax_value_currency, total, total_currency, discounted_total, discounted_total_currency, exchange_rate, exchange_date, created_by, modified_by, extra, auto, amount_paid, is_storno)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner' => 'int',
        'location' => 'int',
        'currency' => 'string',
        'language' => 'string',
        'delegate' => 'int',
        'auto' => 'string',
        'uuid' => 'string',
        'number' => 'string',
        'date' => '\DateTime',
        'due_days' => 'int',
        'status' => 'int',
        'observations' => 'string',
        'due_date' => '\DateTime',
        'discount' => 'string',
        'subtotal' => 'string',
        'tax_value' => 'string',
        'total' => 'string',
        'discounted_total' => 'string',
        'subtotal_currency' => 'string',
        'tax_value_currency' => 'string',
        'total_currency' => 'string',
        'discounted_total_currency' => 'string',
        'exchange_rate' => 'string',
        'extra' => 'object',
        'items' => '\Swagger\Client\Model\SupplierItemModel[]',
        'amount_paid' => 'string',
        'is_storno' => 'bool',
        'document_file' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'partner' => null,
        'location' => null,
        'currency' => null,
        'language' => null,
        'delegate' => null,
        'auto' => null,
        'uuid' => 'uuid',
        'number' => null,
        'date' => 'date',
        'due_days' => null,
        'status' => null,
        'observations' => null,
        'due_date' => 'date',
        'discount' => 'decimal',
        'subtotal' => 'decimal',
        'tax_value' => 'decimal',
        'total' => 'decimal',
        'discounted_total' => 'decimal',
        'subtotal_currency' => 'decimal',
        'tax_value_currency' => 'decimal',
        'total_currency' => 'decimal',
        'discounted_total_currency' => 'decimal',
        'exchange_rate' => 'decimal',
        'extra' => null,
        'items' => null,
        'amount_paid' => 'decimal',
        'is_storno' => null,
        'document_file' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner' => 'partner',
        'location' => 'location',
        'currency' => 'currency',
        'language' => 'language',
        'delegate' => 'delegate',
        'auto' => 'auto',
        'uuid' => 'uuid',
        'number' => 'number',
        'date' => 'date',
        'due_days' => 'due_days',
        'status' => 'status',
        'observations' => 'observations',
        'due_date' => 'due_date',
        'discount' => 'discount',
        'subtotal' => 'subtotal',
        'tax_value' => 'tax_value',
        'total' => 'total',
        'discounted_total' => 'discounted_total',
        'subtotal_currency' => 'subtotal_currency',
        'tax_value_currency' => 'tax_value_currency',
        'total_currency' => 'total_currency',
        'discounted_total_currency' => 'discounted_total_currency',
        'exchange_rate' => 'exchange_rate',
        'extra' => 'extra',
        'items' => 'items',
        'amount_paid' => 'amount_paid',
        'is_storno' => 'is_storno',
        'document_file' => 'document_file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner' => 'setPartner',
        'location' => 'setLocation',
        'currency' => 'setCurrency',
        'language' => 'setLanguage',
        'delegate' => 'setDelegate',
        'auto' => 'setAuto',
        'uuid' => 'setUuid',
        'number' => 'setNumber',
        'date' => 'setDate',
        'due_days' => 'setDueDays',
        'status' => 'setStatus',
        'observations' => 'setObservations',
        'due_date' => 'setDueDate',
        'discount' => 'setDiscount',
        'subtotal' => 'setSubtotal',
        'tax_value' => 'setTaxValue',
        'total' => 'setTotal',
        'discounted_total' => 'setDiscountedTotal',
        'subtotal_currency' => 'setSubtotalCurrency',
        'tax_value_currency' => 'setTaxValueCurrency',
        'total_currency' => 'setTotalCurrency',
        'discounted_total_currency' => 'setDiscountedTotalCurrency',
        'exchange_rate' => 'setExchangeRate',
        'extra' => 'setExtra',
        'items' => 'setItems',
        'amount_paid' => 'setAmountPaid',
        'is_storno' => 'setIsStorno',
        'document_file' => 'setDocumentFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner' => 'getPartner',
        'location' => 'getLocation',
        'currency' => 'getCurrency',
        'language' => 'getLanguage',
        'delegate' => 'getDelegate',
        'auto' => 'getAuto',
        'uuid' => 'getUuid',
        'number' => 'getNumber',
        'date' => 'getDate',
        'due_days' => 'getDueDays',
        'status' => 'getStatus',
        'observations' => 'getObservations',
        'due_date' => 'getDueDate',
        'discount' => 'getDiscount',
        'subtotal' => 'getSubtotal',
        'tax_value' => 'getTaxValue',
        'total' => 'getTotal',
        'discounted_total' => 'getDiscountedTotal',
        'subtotal_currency' => 'getSubtotalCurrency',
        'tax_value_currency' => 'getTaxValueCurrency',
        'total_currency' => 'getTotalCurrency',
        'discounted_total_currency' => 'getDiscountedTotalCurrency',
        'exchange_rate' => 'getExchangeRate',
        'extra' => 'getExtra',
        'items' => 'getItems',
        'amount_paid' => 'getAmountPaid',
        'is_storno' => 'getIsStorno',
        'document_file' => 'getDocumentFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['delegate'] = isset($data['delegate']) ? $data['delegate'] : null;
        $this->container['auto'] = isset($data['auto']) ? $data['auto'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : '';
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['due_days'] = isset($data['due_days']) ? $data['due_days'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['observations'] = isset($data['observations']) ? $data['observations'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['tax_value'] = isset($data['tax_value']) ? $data['tax_value'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['discounted_total'] = isset($data['discounted_total']) ? $data['discounted_total'] : null;
        $this->container['subtotal_currency'] = isset($data['subtotal_currency']) ? $data['subtotal_currency'] : null;
        $this->container['tax_value_currency'] = isset($data['tax_value_currency']) ? $data['tax_value_currency'] : null;
        $this->container['total_currency'] = isset($data['total_currency']) ? $data['total_currency'] : null;
        $this->container['discounted_total_currency'] = isset($data['discounted_total_currency']) ? $data['discounted_total_currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['is_storno'] = isset($data['is_storno']) ? $data['is_storno'] : null;
        $this->container['document_file'] = isset($data['document_file']) ? $data['document_file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partner'] === null) {
            $invalidProperties[] = "'partner' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if (!is_null($this->container['auto']) && (mb_strlen($this->container['auto']) > 100)) {
            $invalidProperties[] = "invalid value for 'auto', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 100)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if (!is_null($this->container['due_days']) && ($this->container['due_days'] > 32767)) {
            $invalidProperties[] = "invalid value for 'due_days', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['due_days']) && ($this->container['due_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'due_days', must be bigger than or equal to 0.";
        }

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets location
     *
     * @return int
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param int $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets delegate
     *
     * @return int
     */
    public function getDelegate()
    {
        return $this->container['delegate'];
    }

    /**
     * Sets delegate
     *
     * @param int $delegate delegate
     *
     * @return $this
     */
    public function setDelegate($delegate)
    {
        $this->container['delegate'] = $delegate;

        return $this;
    }

    /**
     * Gets auto
     *
     * @return string
     */
    public function getAuto()
    {
        return $this->container['auto'];
    }

    /**
     * Sets auto
     *
     * @param string $auto auto
     *
     * @return $this
     */
    public function setAuto($auto)
    {
        if (!is_null($auto) && (mb_strlen($auto) > 100)) {
            throw new \InvalidArgumentException('invalid length for $auto when calling SupplierInvoice., must be smaller than or equal to 100.');
        }

        $this->container['auto'] = $auto;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $number when calling SupplierInvoice., must be smaller than or equal to 100.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_days
     *
     * @return int
     */
    public function getDueDays()
    {
        return $this->container['due_days'];
    }

    /**
     * Sets due_days
     *
     * @param int $due_days due_days
     *
     * @return $this
     */
    public function setDueDays($due_days)
    {

        if (!is_null($due_days) && ($due_days > 32767)) {
            throw new \InvalidArgumentException('invalid value for $due_days when calling SupplierInvoice., must be smaller than or equal to 32767.');
        }
        if (!is_null($due_days) && ($due_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $due_days when calling SupplierInvoice., must be bigger than or equal to 0.');
        }

        $this->container['due_days'] = $due_days;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets observations
     *
     * @return string
     */
    public function getObservations()
    {
        return $this->container['observations'];
    }

    /**
     * Sets observations
     *
     * @param string $observations observations
     *
     * @return $this
     */
    public function setObservations($observations)
    {
        $this->container['observations'] = $observations;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount Procentaj default, dacă este completat rescrie discountul articolelor
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal Subtotal RON redus/întreg
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax_value
     *
     * @return string
     */
    public function getTaxValue()
    {
        return $this->container['tax_value'];
    }

    /**
     * Sets tax_value
     *
     * @param string $tax_value TVA RON redus/întreg
     *
     * @return $this
     */
    public function setTaxValue($tax_value)
    {
        $this->container['tax_value'] = $tax_value;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Total RON redus/întreg
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets discounted_total
     *
     * @return string
     */
    public function getDiscountedTotal()
    {
        return $this->container['discounted_total'];
    }

    /**
     * Sets discounted_total
     *
     * @param string $discounted_total Suma valorilor reduse din articole
     *
     * @return $this
     */
    public function setDiscountedTotal($discounted_total)
    {
        $this->container['discounted_total'] = $discounted_total;

        return $this;
    }

    /**
     * Gets subtotal_currency
     *
     * @return string
     */
    public function getSubtotalCurrency()
    {
        return $this->container['subtotal_currency'];
    }

    /**
     * Sets subtotal_currency
     *
     * @param string $subtotal_currency Subtotal valută redus/întreg
     *
     * @return $this
     */
    public function setSubtotalCurrency($subtotal_currency)
    {
        $this->container['subtotal_currency'] = $subtotal_currency;

        return $this;
    }

    /**
     * Gets tax_value_currency
     *
     * @return string
     */
    public function getTaxValueCurrency()
    {
        return $this->container['tax_value_currency'];
    }

    /**
     * Sets tax_value_currency
     *
     * @param string $tax_value_currency TVA valută redus/întreg
     *
     * @return $this
     */
    public function setTaxValueCurrency($tax_value_currency)
    {
        $this->container['tax_value_currency'] = $tax_value_currency;

        return $this;
    }

    /**
     * Gets total_currency
     *
     * @return string
     */
    public function getTotalCurrency()
    {
        return $this->container['total_currency'];
    }

    /**
     * Sets total_currency
     *
     * @param string $total_currency Total valută redus/întreg
     *
     * @return $this
     */
    public function setTotalCurrency($total_currency)
    {
        $this->container['total_currency'] = $total_currency;

        return $this;
    }

    /**
     * Gets discounted_total_currency
     *
     * @return string
     */
    public function getDiscountedTotalCurrency()
    {
        return $this->container['discounted_total_currency'];
    }

    /**
     * Sets discounted_total_currency
     *
     * @param string $discounted_total_currency Suma valorilor reduse din articole
     *
     * @return $this
     */
    public function setDiscountedTotalCurrency($discounted_total_currency)
    {
        $this->container['discounted_total_currency'] = $discounted_total_currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return object
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param object $extra Acest field este pentru a se stoca idul și tipul facturii la generarea din invoice_1 în invoice_2.
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\SupplierItemModel[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\SupplierItemModel[] $items 
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return string
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param string $amount_paid amount_paid
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets is_storno
     *
     * @return bool
     */
    public function getIsStorno()
    {
        return $this->container['is_storno'];
    }

    /**
     * Sets is_storno
     *
     * @param bool $is_storno is_storno
     *
     * @return $this
     */
    public function setIsStorno($is_storno)
    {
        $this->container['is_storno'] = $is_storno;

        return $this;
    }

    /**
     * Gets document_file
     *
     * @return string
     */
    public function getDocumentFile()
    {
        return $this->container['document_file'];
    }

    /**
     * Sets document_file
     *
     * @param string $document_file document_file
     *
     * @return $this
     */
    public function setDocumentFile($document_file)
    {
        $this->container['document_file'] = $document_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


