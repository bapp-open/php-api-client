<?php
/**
 * Notification
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Notification Class Doc Comment
 *
 * @category Class
 * @description Action model describing the actor acting out a verb (on an optional target). Nomenclature based on http://activitystrea.ms/specs/atom/1.0/ Generalized Format:: &lt;actor&gt; &lt;verb&gt; &lt;time&gt; &lt;actor&gt; &lt;verb&gt; &lt;target&gt; &lt;time&gt; &lt;actor&gt; &lt;verb&gt; &lt;action_object&gt; &lt;target&gt; &lt;time&gt; Examples:: &lt;justquick&gt; &lt;reached level 60&gt; &lt;1 minute ago&gt; &lt;brosner&gt; &lt;commented on&gt; &lt;pinax/pinax&gt; &lt;2 hours ago&gt; &lt;washingtontimes&gt; &lt;started follow&gt; &lt;justquick&gt; &lt;8 minutes ago&gt; &lt;mitsuhiko&gt; &lt;closed&gt; &lt;issue 70&gt; on &lt;mitsuhiko/flask&gt; &lt;about 2 hours ago&gt; Unicode Representation:: justquick reached level 60 1 minute ago mitsuhiko closed issue 70 on mitsuhiko/flask 3 hours ago HTML Representation:: &lt;a href&#x3D;\&quot;http://oebfare.com/\&quot;&gt;brosner&lt;/a&gt; commented on &lt;a href&#x3D;\&quot;http://github.com/pinax/pinax\&quot;&gt;pinax/pinax&lt;/a&gt; 2 hours ago # noqa ALTERNATE: - actor: An Object Construct that identifies the entity that performed the activity. An Activity construct MUST have exactly one actor. - verb: Description of action happened. - target: The target of an activity is an Object Construct that represents the object to which the activity was performed - time: The time at which the activity occurred
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Notification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Notification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time' => '\DateTime',
        'level' => 'int',
        'unread' => 'bool',
        'actor_content_type' => 'string',
        'actor_id' => 'string',
        'verb' => 'string',
        'target_content_type' => 'string',
        'target_id' => 'string',
        'action_object_content_type' => 'string',
        'action_object_id' => 'string',
        'message' => 'string',
        'company_id' => 'string',
        'notification_link' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time' => 'date-time',
        'level' => null,
        'unread' => null,
        'actor_content_type' => null,
        'actor_id' => null,
        'verb' => null,
        'target_content_type' => null,
        'target_id' => null,
        'action_object_content_type' => null,
        'action_object_id' => null,
        'message' => null,
        'company_id' => null,
        'notification_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time' => 'time',
        'level' => 'level',
        'unread' => 'unread',
        'actor_content_type' => 'actor_content_type',
        'actor_id' => 'actor_id',
        'verb' => 'verb',
        'target_content_type' => 'target_content_type',
        'target_id' => 'target_id',
        'action_object_content_type' => 'action_object_content_type',
        'action_object_id' => 'action_object_id',
        'message' => 'message',
        'company_id' => 'company_id',
        'notification_link' => 'notification_link'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time' => 'setTime',
        'level' => 'setLevel',
        'unread' => 'setUnread',
        'actor_content_type' => 'setActorContentType',
        'actor_id' => 'setActorId',
        'verb' => 'setVerb',
        'target_content_type' => 'setTargetContentType',
        'target_id' => 'setTargetId',
        'action_object_content_type' => 'setActionObjectContentType',
        'action_object_id' => 'setActionObjectId',
        'message' => 'setMessage',
        'company_id' => 'setCompanyId',
        'notification_link' => 'setNotificationLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time' => 'getTime',
        'level' => 'getLevel',
        'unread' => 'getUnread',
        'actor_content_type' => 'getActorContentType',
        'actor_id' => 'getActorId',
        'verb' => 'getVerb',
        'target_content_type' => 'getTargetContentType',
        'target_id' => 'getTargetId',
        'action_object_content_type' => 'getActionObjectContentType',
        'action_object_id' => 'getActionObjectId',
        'message' => 'getMessage',
        'company_id' => 'getCompanyId',
        'notification_link' => 'getNotificationLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['unread'] = isset($data['unread']) ? $data['unread'] : null;
        $this->container['actor_content_type'] = isset($data['actor_content_type']) ? $data['actor_content_type'] : null;
        $this->container['actor_id'] = isset($data['actor_id']) ? $data['actor_id'] : null;
        $this->container['verb'] = isset($data['verb']) ? $data['verb'] : null;
        $this->container['target_content_type'] = isset($data['target_content_type']) ? $data['target_content_type'] : null;
        $this->container['target_id'] = isset($data['target_id']) ? $data['target_id'] : null;
        $this->container['action_object_content_type'] = isset($data['action_object_content_type']) ? $data['action_object_content_type'] : null;
        $this->container['action_object_id'] = isset($data['action_object_id']) ? $data['action_object_id'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['notification_link'] = isset($data['notification_link']) ? $data['notification_link'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if (!is_null($this->container['actor_content_type']) && (mb_strlen($this->container['actor_content_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'actor_content_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['actor_id']) && (mb_strlen($this->container['actor_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'actor_id', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['verb'] === null) {
            $invalidProperties[] = "'verb' can't be null";
        }
        if ((mb_strlen($this->container['verb']) > 100)) {
            $invalidProperties[] = "invalid value for 'verb', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['verb']) < 1)) {
            $invalidProperties[] = "invalid value for 'verb', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['target_content_type']) && (mb_strlen($this->container['target_content_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'target_content_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['target_id']) && (mb_strlen($this->container['target_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'target_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['action_object_content_type']) && (mb_strlen($this->container['action_object_content_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'action_object_content_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['action_object_id']) && (mb_strlen($this->container['action_object_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'action_object_id', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time
     *
     * @return \DateTime
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets unread
     *
     * @return bool
     */
    public function getUnread()
    {
        return $this->container['unread'];
    }

    /**
     * Sets unread
     *
     * @param bool $unread unread
     *
     * @return $this
     */
    public function setUnread($unread)
    {
        $this->container['unread'] = $unread;

        return $this;
    }

    /**
     * Gets actor_content_type
     *
     * @return string
     */
    public function getActorContentType()
    {
        return $this->container['actor_content_type'];
    }

    /**
     * Sets actor_content_type
     *
     * @param string $actor_content_type actor_content_type
     *
     * @return $this
     */
    public function setActorContentType($actor_content_type)
    {
        if (!is_null($actor_content_type) && (mb_strlen($actor_content_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $actor_content_type when calling Notification., must be smaller than or equal to 100.');
        }

        $this->container['actor_content_type'] = $actor_content_type;

        return $this;
    }

    /**
     * Gets actor_id
     *
     * @return string
     */
    public function getActorId()
    {
        return $this->container['actor_id'];
    }

    /**
     * Sets actor_id
     *
     * @param string $actor_id actor_id
     *
     * @return $this
     */
    public function setActorId($actor_id)
    {
        if (!is_null($actor_id) && (mb_strlen($actor_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $actor_id when calling Notification., must be smaller than or equal to 100.');
        }

        $this->container['actor_id'] = $actor_id;

        return $this;
    }

    /**
     * Gets verb
     *
     * @return string
     */
    public function getVerb()
    {
        return $this->container['verb'];
    }

    /**
     * Sets verb
     *
     * @param string $verb verb
     *
     * @return $this
     */
    public function setVerb($verb)
    {
        if ((mb_strlen($verb) > 100)) {
            throw new \InvalidArgumentException('invalid length for $verb when calling Notification., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($verb) < 1)) {
            throw new \InvalidArgumentException('invalid length for $verb when calling Notification., must be bigger than or equal to 1.');
        }

        $this->container['verb'] = $verb;

        return $this;
    }

    /**
     * Gets target_content_type
     *
     * @return string
     */
    public function getTargetContentType()
    {
        return $this->container['target_content_type'];
    }

    /**
     * Sets target_content_type
     *
     * @param string $target_content_type target_content_type
     *
     * @return $this
     */
    public function setTargetContentType($target_content_type)
    {
        if (!is_null($target_content_type) && (mb_strlen($target_content_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $target_content_type when calling Notification., must be smaller than or equal to 100.');
        }

        $this->container['target_content_type'] = $target_content_type;

        return $this;
    }

    /**
     * Gets target_id
     *
     * @return string
     */
    public function getTargetId()
    {
        return $this->container['target_id'];
    }

    /**
     * Sets target_id
     *
     * @param string $target_id target_id
     *
     * @return $this
     */
    public function setTargetId($target_id)
    {
        if (!is_null($target_id) && (mb_strlen($target_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $target_id when calling Notification., must be smaller than or equal to 100.');
        }

        $this->container['target_id'] = $target_id;

        return $this;
    }

    /**
     * Gets action_object_content_type
     *
     * @return string
     */
    public function getActionObjectContentType()
    {
        return $this->container['action_object_content_type'];
    }

    /**
     * Sets action_object_content_type
     *
     * @param string $action_object_content_type action_object_content_type
     *
     * @return $this
     */
    public function setActionObjectContentType($action_object_content_type)
    {
        if (!is_null($action_object_content_type) && (mb_strlen($action_object_content_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $action_object_content_type when calling Notification., must be smaller than or equal to 100.');
        }

        $this->container['action_object_content_type'] = $action_object_content_type;

        return $this;
    }

    /**
     * Gets action_object_id
     *
     * @return string
     */
    public function getActionObjectId()
    {
        return $this->container['action_object_id'];
    }

    /**
     * Sets action_object_id
     *
     * @param string $action_object_id action_object_id
     *
     * @return $this
     */
    public function setActionObjectId($action_object_id)
    {
        if (!is_null($action_object_id) && (mb_strlen($action_object_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $action_object_id when calling Notification., must be smaller than or equal to 100.');
        }

        $this->container['action_object_id'] = $action_object_id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id company_id
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets notification_link
     *
     * @return string
     */
    public function getNotificationLink()
    {
        return $this->container['notification_link'];
    }

    /**
     * Sets notification_link
     *
     * @param string $notification_link notification_link
     *
     * @return $this
     */
    public function setNotificationLink($notification_link)
    {
        $this->container['notification_link'] = $notification_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


