<?php
/**
 * ProjectTaskUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProjectTaskUpdate Class Doc Comment
 *
 * @category Class
 * @description ProjectTask(id, company, project, task_list, status_workflow, on_complete, machine, name, description, date, priority, billable, price, estimate, duration, position, subtasks, ready, can_be_closed, completed_at, created_at, added_by)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectTaskUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectTaskUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'date' => '\DateTime',
        'priority' => 'int',
        'status_workflow' => 'int',
        'billable' => 'int',
        'assigned_to' => 'int[]',
        'price' => 'string',
        'estimate' => 'float',
        'position' => 'int',
        'depends_on' => 'int[]',
        'project' => 'int',
        'task_list' => 'int',
        'duration' => 'float',
        'subtasks' => 'string[]',
        'added_by' => 'int',
        'created_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'ready' => 'bool',
        'can_be_closed' => 'bool',
        'time_consumptions' => 'string',
        'on_complete' => 'int',
        'status_colour' => 'string',
        'machine' => 'int',
        'completed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'date' => 'date-time',
        'priority' => null,
        'status_workflow' => null,
        'billable' => null,
        'assigned_to' => null,
        'price' => 'decimal',
        'estimate' => null,
        'position' => null,
        'depends_on' => null,
        'project' => null,
        'task_list' => null,
        'duration' => null,
        'subtasks' => null,
        'added_by' => null,
        'created_at' => 'date-time',
        'completed_at' => 'date-time',
        'ready' => null,
        'can_be_closed' => null,
        'time_consumptions' => null,
        'on_complete' => null,
        'status_colour' => null,
        'machine' => null,
        'completed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'date' => 'date',
        'priority' => 'priority',
        'status_workflow' => 'status_workflow',
        'billable' => 'billable',
        'assigned_to' => 'assigned_to',
        'price' => 'price',
        'estimate' => 'estimate',
        'position' => 'position',
        'depends_on' => 'depends_on',
        'project' => 'project',
        'task_list' => 'task_list',
        'duration' => 'duration',
        'subtasks' => 'subtasks',
        'added_by' => 'added_by',
        'created_at' => 'created_at',
        'completed_at' => 'completed_at',
        'ready' => 'ready',
        'can_be_closed' => 'can_be_closed',
        'time_consumptions' => 'time_consumptions',
        'on_complete' => 'on_complete',
        'status_colour' => 'status_colour',
        'machine' => 'machine',
        'completed' => 'completed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'date' => 'setDate',
        'priority' => 'setPriority',
        'status_workflow' => 'setStatusWorkflow',
        'billable' => 'setBillable',
        'assigned_to' => 'setAssignedTo',
        'price' => 'setPrice',
        'estimate' => 'setEstimate',
        'position' => 'setPosition',
        'depends_on' => 'setDependsOn',
        'project' => 'setProject',
        'task_list' => 'setTaskList',
        'duration' => 'setDuration',
        'subtasks' => 'setSubtasks',
        'added_by' => 'setAddedBy',
        'created_at' => 'setCreatedAt',
        'completed_at' => 'setCompletedAt',
        'ready' => 'setReady',
        'can_be_closed' => 'setCanBeClosed',
        'time_consumptions' => 'setTimeConsumptions',
        'on_complete' => 'setOnComplete',
        'status_colour' => 'setStatusColour',
        'machine' => 'setMachine',
        'completed' => 'setCompleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'date' => 'getDate',
        'priority' => 'getPriority',
        'status_workflow' => 'getStatusWorkflow',
        'billable' => 'getBillable',
        'assigned_to' => 'getAssignedTo',
        'price' => 'getPrice',
        'estimate' => 'getEstimate',
        'position' => 'getPosition',
        'depends_on' => 'getDependsOn',
        'project' => 'getProject',
        'task_list' => 'getTaskList',
        'duration' => 'getDuration',
        'subtasks' => 'getSubtasks',
        'added_by' => 'getAddedBy',
        'created_at' => 'getCreatedAt',
        'completed_at' => 'getCompletedAt',
        'ready' => 'getReady',
        'can_be_closed' => 'getCanBeClosed',
        'time_consumptions' => 'getTimeConsumptions',
        'on_complete' => 'getOnComplete',
        'status_colour' => 'getStatusColour',
        'machine' => 'getMachine',
        'completed' => 'getCompleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['status_workflow'] = isset($data['status_workflow']) ? $data['status_workflow'] : null;
        $this->container['billable'] = isset($data['billable']) ? $data['billable'] : null;
        $this->container['assigned_to'] = isset($data['assigned_to']) ? $data['assigned_to'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['depends_on'] = isset($data['depends_on']) ? $data['depends_on'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['task_list'] = isset($data['task_list']) ? $data['task_list'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['subtasks'] = isset($data['subtasks']) ? $data['subtasks'] : null;
        $this->container['added_by'] = isset($data['added_by']) ? $data['added_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['ready'] = isset($data['ready']) ? $data['ready'] : null;
        $this->container['can_be_closed'] = isset($data['can_be_closed']) ? $data['can_be_closed'] : null;
        $this->container['time_consumptions'] = isset($data['time_consumptions']) ? $data['time_consumptions'] : null;
        $this->container['on_complete'] = isset($data['on_complete']) ? $data['on_complete'] : null;
        $this->container['status_colour'] = isset($data['status_colour']) ? $data['status_colour'] : null;
        $this->container['machine'] = isset($data['machine']) ? $data['machine'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProjectTaskUpdate., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProjectTaskUpdate., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets status_workflow
     *
     * @return int
     */
    public function getStatusWorkflow()
    {
        return $this->container['status_workflow'];
    }

    /**
     * Sets status_workflow
     *
     * @param int $status_workflow status_workflow
     *
     * @return $this
     */
    public function setStatusWorkflow($status_workflow)
    {
        $this->container['status_workflow'] = $status_workflow;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return int
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param int $billable billable
     *
     * @return $this
     */
    public function setBillable($billable)
    {
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets assigned_to
     *
     * @return int[]
     */
    public function getAssignedTo()
    {
        return $this->container['assigned_to'];
    }

    /**
     * Sets assigned_to
     *
     * @param int[] $assigned_to assigned_to
     *
     * @return $this
     */
    public function setAssignedTo($assigned_to)
    {
        $this->container['assigned_to'] = $assigned_to;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return float
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param float $estimate estimate
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets depends_on
     *
     * @return int[]
     */
    public function getDependsOn()
    {
        return $this->container['depends_on'];
    }

    /**
     * Sets depends_on
     *
     * @param int[] $depends_on depends_on
     *
     * @return $this
     */
    public function setDependsOn($depends_on)
    {
        $this->container['depends_on'] = $depends_on;

        return $this;
    }

    /**
     * Gets project
     *
     * @return int
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param int $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets task_list
     *
     * @return int
     */
    public function getTaskList()
    {
        return $this->container['task_list'];
    }

    /**
     * Sets task_list
     *
     * @param int $task_list task_list
     *
     * @return $this
     */
    public function setTaskList($task_list)
    {
        $this->container['task_list'] = $task_list;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets subtasks
     *
     * @return string[]
     */
    public function getSubtasks()
    {
        return $this->container['subtasks'];
    }

    /**
     * Sets subtasks
     *
     * @param string[] $subtasks 
     *
     * @return $this
     */
    public function setSubtasks($subtasks)
    {
        $this->container['subtasks'] = $subtasks;

        return $this;
    }

    /**
     * Gets added_by
     *
     * @return int
     */
    public function getAddedBy()
    {
        return $this->container['added_by'];
    }

    /**
     * Sets added_by
     *
     * @param int $added_by added_by
     *
     * @return $this
     */
    public function setAddedBy($added_by)
    {
        $this->container['added_by'] = $added_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which this record was added
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime $completed_at completed_at
     *
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets ready
     *
     * @return bool
     */
    public function getReady()
    {
        return $this->container['ready'];
    }

    /**
     * Sets ready
     *
     * @param bool $ready Task is ready to work on it (all dependencies are completed)
     *
     * @return $this
     */
    public function setReady($ready)
    {
        $this->container['ready'] = $ready;

        return $this;
    }

    /**
     * Gets can_be_closed
     *
     * @return bool
     */
    public function getCanBeClosed()
    {
        return $this->container['can_be_closed'];
    }

    /**
     * Sets can_be_closed
     *
     * @param bool $can_be_closed If True task can now be close
     *
     * @return $this
     */
    public function setCanBeClosed($can_be_closed)
    {
        $this->container['can_be_closed'] = $can_be_closed;

        return $this;
    }

    /**
     * Gets time_consumptions
     *
     * @return string
     */
    public function getTimeConsumptions()
    {
        return $this->container['time_consumptions'];
    }

    /**
     * Sets time_consumptions
     *
     * @param string $time_consumptions time_consumptions
     *
     * @return $this
     */
    public function setTimeConsumptions($time_consumptions)
    {
        $this->container['time_consumptions'] = $time_consumptions;

        return $this;
    }

    /**
     * Gets on_complete
     *
     * @return int
     */
    public function getOnComplete()
    {
        return $this->container['on_complete'];
    }

    /**
     * Sets on_complete
     *
     * @param int $on_complete on_complete
     *
     * @return $this
     */
    public function setOnComplete($on_complete)
    {
        $this->container['on_complete'] = $on_complete;

        return $this;
    }

    /**
     * Gets status_colour
     *
     * @return string
     */
    public function getStatusColour()
    {
        return $this->container['status_colour'];
    }

    /**
     * Sets status_colour
     *
     * @param string $status_colour status_colour
     *
     * @return $this
     */
    public function setStatusColour($status_colour)
    {
        $this->container['status_colour'] = $status_colour;

        return $this;
    }

    /**
     * Gets machine
     *
     * @return int
     */
    public function getMachine()
    {
        return $this->container['machine'];
    }

    /**
     * Sets machine
     *
     * @param int $machine machine
     *
     * @return $this
     */
    public function setMachine($machine)
    {
        $this->container['machine'] = $machine;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


