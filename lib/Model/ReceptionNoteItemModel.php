<?php
/**
 * ReceptionNoteItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReceptionNoteItemModel Class Doc Comment
 *
 * @category Class
 * @description ReceptionNoteItem(id, company, parent, product, name, unit, description, quantity_doc, quantity, tax, price, subtotal, tax_value, total, price_currency, subtotal_currency, tax_value_currency, total_currency)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceptionNoteItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReceptionNoteItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company' => 'int',
        'product' => 'int',
        'unit' => 'string',
        'name' => 'string',
        'description' => 'string',
        'quantity_doc' => 'string',
        'quantity' => 'string',
        'tax' => 'string',
        'price' => 'string',
        'subtotal' => 'string',
        'tax_value' => 'string',
        'total' => 'string',
        'price_currency' => 'string',
        'subtotal_currency' => 'string',
        'tax_value_currency' => 'string',
        'total_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'company' => null,
        'product' => null,
        'unit' => null,
        'name' => null,
        'description' => null,
        'quantity_doc' => 'decimal',
        'quantity' => 'decimal',
        'tax' => 'decimal',
        'price' => 'decimal',
        'subtotal' => 'decimal',
        'tax_value' => 'decimal',
        'total' => 'decimal',
        'price_currency' => 'decimal',
        'subtotal_currency' => 'decimal',
        'tax_value_currency' => 'decimal',
        'total_currency' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company' => 'company',
        'product' => 'product',
        'unit' => 'unit',
        'name' => 'name',
        'description' => 'description',
        'quantity_doc' => 'quantity_doc',
        'quantity' => 'quantity',
        'tax' => 'tax',
        'price' => 'price',
        'subtotal' => 'subtotal',
        'tax_value' => 'tax_value',
        'total' => 'total',
        'price_currency' => 'price_currency',
        'subtotal_currency' => 'subtotal_currency',
        'tax_value_currency' => 'tax_value_currency',
        'total_currency' => 'total_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company' => 'setCompany',
        'product' => 'setProduct',
        'unit' => 'setUnit',
        'name' => 'setName',
        'description' => 'setDescription',
        'quantity_doc' => 'setQuantityDoc',
        'quantity' => 'setQuantity',
        'tax' => 'setTax',
        'price' => 'setPrice',
        'subtotal' => 'setSubtotal',
        'tax_value' => 'setTaxValue',
        'total' => 'setTotal',
        'price_currency' => 'setPriceCurrency',
        'subtotal_currency' => 'setSubtotalCurrency',
        'tax_value_currency' => 'setTaxValueCurrency',
        'total_currency' => 'setTotalCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company' => 'getCompany',
        'product' => 'getProduct',
        'unit' => 'getUnit',
        'name' => 'getName',
        'description' => 'getDescription',
        'quantity_doc' => 'getQuantityDoc',
        'quantity' => 'getQuantity',
        'tax' => 'getTax',
        'price' => 'getPrice',
        'subtotal' => 'getSubtotal',
        'tax_value' => 'getTaxValue',
        'total' => 'getTotal',
        'price_currency' => 'getPriceCurrency',
        'subtotal_currency' => 'getSubtotalCurrency',
        'tax_value_currency' => 'getTaxValueCurrency',
        'total_currency' => 'getTotalCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity_doc'] = isset($data['quantity_doc']) ? $data['quantity_doc'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['tax_value'] = isset($data['tax_value']) ? $data['tax_value'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['price_currency'] = isset($data['price_currency']) ? $data['price_currency'] : null;
        $this->container['subtotal_currency'] = isset($data['subtotal_currency']) ? $data['subtotal_currency'] : null;
        $this->container['tax_value_currency'] = isset($data['tax_value_currency']) ? $data['tax_value_currency'] : null;
        $this->container['total_currency'] = isset($data['total_currency']) ? $data['total_currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 20)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity_doc'] === null) {
            $invalidProperties[] = "'quantity_doc' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['price_currency'] === null) {
            $invalidProperties[] = "'price_currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return int
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param int $company Firma care deține această înregistrare.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 20)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling ReceptionNoteItemModel., must be smaller than or equal to 20.');
        }
        if (!is_null($unit) && (mb_strlen($unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling ReceptionNoteItemModel., must be bigger than or equal to 1.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ReceptionNoteItemModel., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ReceptionNoteItemModel., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity_doc
     *
     * @return string
     */
    public function getQuantityDoc()
    {
        return $this->container['quantity_doc'];
    }

    /**
     * Sets quantity_doc
     *
     * @param string $quantity_doc quantity_doc
     *
     * @return $this
     */
    public function setQuantityDoc($quantity_doc)
    {
        $this->container['quantity_doc'] = $quantity_doc;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax Procentaj TVA, aplicat dacă este plătitor de TVA.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Preț RON
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal Subtotal RON
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax_value
     *
     * @return string
     */
    public function getTaxValue()
    {
        return $this->container['tax_value'];
    }

    /**
     * Sets tax_value
     *
     * @param string $tax_value TVA RON
     *
     * @return $this
     */
    public function setTaxValue($tax_value)
    {
        $this->container['tax_value'] = $tax_value;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Total RON
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets price_currency
     *
     * @return string
     */
    public function getPriceCurrency()
    {
        return $this->container['price_currency'];
    }

    /**
     * Sets price_currency
     *
     * @param string $price_currency Preț valută
     *
     * @return $this
     */
    public function setPriceCurrency($price_currency)
    {
        $this->container['price_currency'] = $price_currency;

        return $this;
    }

    /**
     * Gets subtotal_currency
     *
     * @return string
     */
    public function getSubtotalCurrency()
    {
        return $this->container['subtotal_currency'];
    }

    /**
     * Sets subtotal_currency
     *
     * @param string $subtotal_currency Subtotal valută
     *
     * @return $this
     */
    public function setSubtotalCurrency($subtotal_currency)
    {
        $this->container['subtotal_currency'] = $subtotal_currency;

        return $this;
    }

    /**
     * Gets tax_value_currency
     *
     * @return string
     */
    public function getTaxValueCurrency()
    {
        return $this->container['tax_value_currency'];
    }

    /**
     * Sets tax_value_currency
     *
     * @param string $tax_value_currency TVA valută
     *
     * @return $this
     */
    public function setTaxValueCurrency($tax_value_currency)
    {
        $this->container['tax_value_currency'] = $tax_value_currency;

        return $this;
    }

    /**
     * Gets total_currency
     *
     * @return string
     */
    public function getTotalCurrency()
    {
        return $this->container['total_currency'];
    }

    /**
     * Sets total_currency
     *
     * @param string $total_currency Total valută
     *
     * @return $this
     */
    public function setTotalCurrency($total_currency)
    {
        $this->container['total_currency'] = $total_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


