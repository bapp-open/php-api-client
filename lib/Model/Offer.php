<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description Offer(id, created_at, modified_at, created_by, modified_by, snapshot, company, partner, currency, number, date, due_date, uuid, type, markup, discount_general, has_discount, subtotal, subtotal_currency, tax_value, tax_value_currency, total, total_currency, discounted_total, discounted_total_currency, exchange_rate, accepted, accepted_date, sent, sent_date)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner' => 'int',
        'currency' => 'string',
        'number' => 'int',
        'date' => '\DateTime',
        'due_date' => '\DateTime',
        'uuid' => 'string',
        'discount_general' => 'int',
        'has_discount' => 'bool',
        'subtotal' => 'string',
        'subtotal_currency' => 'string',
        'tax_value' => 'string',
        'tax_value_currency' => 'string',
        'total' => 'string',
        'total_currency' => 'string',
        'discounted_total' => 'string',
        'discounted_total_currency' => 'string',
        'exchange_rate' => 'string',
        'accepted' => 'bool',
        'accepted_date' => '\DateTime',
        'sent' => 'bool',
        'sent_date' => '\DateTime',
        'markup' => 'string',
        'type' => 'int',
        'show_totals' => 'string',
        'items' => '\Swagger\Client\Model\OfferItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'partner' => null,
        'currency' => null,
        'number' => null,
        'date' => 'date',
        'due_date' => 'date',
        'uuid' => 'uuid',
        'discount_general' => null,
        'has_discount' => null,
        'subtotal' => 'decimal',
        'subtotal_currency' => 'decimal',
        'tax_value' => 'decimal',
        'tax_value_currency' => 'decimal',
        'total' => 'decimal',
        'total_currency' => 'decimal',
        'discounted_total' => 'decimal',
        'discounted_total_currency' => 'decimal',
        'exchange_rate' => 'decimal',
        'accepted' => null,
        'accepted_date' => 'date-time',
        'sent' => null,
        'sent_date' => 'date-time',
        'markup' => 'decimal',
        'type' => null,
        'show_totals' => null,
        'items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner' => 'partner',
        'currency' => 'currency',
        'number' => 'number',
        'date' => 'date',
        'due_date' => 'due_date',
        'uuid' => 'uuid',
        'discount_general' => 'discount_general',
        'has_discount' => 'has_discount',
        'subtotal' => 'subtotal',
        'subtotal_currency' => 'subtotal_currency',
        'tax_value' => 'tax_value',
        'tax_value_currency' => 'tax_value_currency',
        'total' => 'total',
        'total_currency' => 'total_currency',
        'discounted_total' => 'discounted_total',
        'discounted_total_currency' => 'discounted_total_currency',
        'exchange_rate' => 'exchange_rate',
        'accepted' => 'accepted',
        'accepted_date' => 'accepted_date',
        'sent' => 'sent',
        'sent_date' => 'sent_date',
        'markup' => 'markup',
        'type' => 'type',
        'show_totals' => 'show_totals',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner' => 'setPartner',
        'currency' => 'setCurrency',
        'number' => 'setNumber',
        'date' => 'setDate',
        'due_date' => 'setDueDate',
        'uuid' => 'setUuid',
        'discount_general' => 'setDiscountGeneral',
        'has_discount' => 'setHasDiscount',
        'subtotal' => 'setSubtotal',
        'subtotal_currency' => 'setSubtotalCurrency',
        'tax_value' => 'setTaxValue',
        'tax_value_currency' => 'setTaxValueCurrency',
        'total' => 'setTotal',
        'total_currency' => 'setTotalCurrency',
        'discounted_total' => 'setDiscountedTotal',
        'discounted_total_currency' => 'setDiscountedTotalCurrency',
        'exchange_rate' => 'setExchangeRate',
        'accepted' => 'setAccepted',
        'accepted_date' => 'setAcceptedDate',
        'sent' => 'setSent',
        'sent_date' => 'setSentDate',
        'markup' => 'setMarkup',
        'type' => 'setType',
        'show_totals' => 'setShowTotals',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner' => 'getPartner',
        'currency' => 'getCurrency',
        'number' => 'getNumber',
        'date' => 'getDate',
        'due_date' => 'getDueDate',
        'uuid' => 'getUuid',
        'discount_general' => 'getDiscountGeneral',
        'has_discount' => 'getHasDiscount',
        'subtotal' => 'getSubtotal',
        'subtotal_currency' => 'getSubtotalCurrency',
        'tax_value' => 'getTaxValue',
        'tax_value_currency' => 'getTaxValueCurrency',
        'total' => 'getTotal',
        'total_currency' => 'getTotalCurrency',
        'discounted_total' => 'getDiscountedTotal',
        'discounted_total_currency' => 'getDiscountedTotalCurrency',
        'exchange_rate' => 'getExchangeRate',
        'accepted' => 'getAccepted',
        'accepted_date' => 'getAcceptedDate',
        'sent' => 'getSent',
        'sent_date' => 'getSentDate',
        'markup' => 'getMarkup',
        'type' => 'getType',
        'show_totals' => 'getShowTotals',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['discount_general'] = isset($data['discount_general']) ? $data['discount_general'] : null;
        $this->container['has_discount'] = isset($data['has_discount']) ? $data['has_discount'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['subtotal_currency'] = isset($data['subtotal_currency']) ? $data['subtotal_currency'] : null;
        $this->container['tax_value'] = isset($data['tax_value']) ? $data['tax_value'] : null;
        $this->container['tax_value_currency'] = isset($data['tax_value_currency']) ? $data['tax_value_currency'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['total_currency'] = isset($data['total_currency']) ? $data['total_currency'] : null;
        $this->container['discounted_total'] = isset($data['discounted_total']) ? $data['discounted_total'] : null;
        $this->container['discounted_total_currency'] = isset($data['discounted_total_currency']) ? $data['discounted_total_currency'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['accepted'] = isset($data['accepted']) ? $data['accepted'] : null;
        $this->container['accepted_date'] = isset($data['accepted_date']) ? $data['accepted_date'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['sent_date'] = isset($data['sent_date']) ? $data['sent_date'] : null;
        $this->container['markup'] = isset($data['markup']) ? $data['markup'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['show_totals'] = isset($data['show_totals']) ? $data['show_totals'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partner'] === null) {
            $invalidProperties[] = "'partner' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if (!is_null($this->container['discount_general']) && ($this->container['discount_general'] > 32767)) {
            $invalidProperties[] = "invalid value for 'discount_general', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['discount_general']) && ($this->container['discount_general'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_general', must be bigger than or equal to 0.";
        }

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets discount_general
     *
     * @return int
     */
    public function getDiscountGeneral()
    {
        return $this->container['discount_general'];
    }

    /**
     * Sets discount_general
     *
     * @param int $discount_general discount_general
     *
     * @return $this
     */
    public function setDiscountGeneral($discount_general)
    {

        if (!is_null($discount_general) && ($discount_general > 32767)) {
            throw new \InvalidArgumentException('invalid value for $discount_general when calling Offer., must be smaller than or equal to 32767.');
        }
        if (!is_null($discount_general) && ($discount_general < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_general when calling Offer., must be bigger than or equal to 0.');
        }

        $this->container['discount_general'] = $discount_general;

        return $this;
    }

    /**
     * Gets has_discount
     *
     * @return bool
     */
    public function getHasDiscount()
    {
        return $this->container['has_discount'];
    }

    /**
     * Sets has_discount
     *
     * @param bool $has_discount True dacă unul din articole are discount aplicat.
     *
     * @return $this
     */
    public function setHasDiscount($has_discount)
    {
        $this->container['has_discount'] = $has_discount;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal Subtotal RON redus/întreg
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets subtotal_currency
     *
     * @return string
     */
    public function getSubtotalCurrency()
    {
        return $this->container['subtotal_currency'];
    }

    /**
     * Sets subtotal_currency
     *
     * @param string $subtotal_currency Subtotal valută redus/întreg
     *
     * @return $this
     */
    public function setSubtotalCurrency($subtotal_currency)
    {
        $this->container['subtotal_currency'] = $subtotal_currency;

        return $this;
    }

    /**
     * Gets tax_value
     *
     * @return string
     */
    public function getTaxValue()
    {
        return $this->container['tax_value'];
    }

    /**
     * Sets tax_value
     *
     * @param string $tax_value TVA RON redus/întreg
     *
     * @return $this
     */
    public function setTaxValue($tax_value)
    {
        $this->container['tax_value'] = $tax_value;

        return $this;
    }

    /**
     * Gets tax_value_currency
     *
     * @return string
     */
    public function getTaxValueCurrency()
    {
        return $this->container['tax_value_currency'];
    }

    /**
     * Sets tax_value_currency
     *
     * @param string $tax_value_currency TVA valută redus/întreg
     *
     * @return $this
     */
    public function setTaxValueCurrency($tax_value_currency)
    {
        $this->container['tax_value_currency'] = $tax_value_currency;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Total RON redus/întreg
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_currency
     *
     * @return string
     */
    public function getTotalCurrency()
    {
        return $this->container['total_currency'];
    }

    /**
     * Sets total_currency
     *
     * @param string $total_currency Total valută redus/întreg
     *
     * @return $this
     */
    public function setTotalCurrency($total_currency)
    {
        $this->container['total_currency'] = $total_currency;

        return $this;
    }

    /**
     * Gets discounted_total
     *
     * @return string
     */
    public function getDiscountedTotal()
    {
        return $this->container['discounted_total'];
    }

    /**
     * Sets discounted_total
     *
     * @param string $discounted_total Suma valorilor reduse din articole
     *
     * @return $this
     */
    public function setDiscountedTotal($discounted_total)
    {
        $this->container['discounted_total'] = $discounted_total;

        return $this;
    }

    /**
     * Gets discounted_total_currency
     *
     * @return string
     */
    public function getDiscountedTotalCurrency()
    {
        return $this->container['discounted_total_currency'];
    }

    /**
     * Sets discounted_total_currency
     *
     * @param string $discounted_total_currency Suma valorilor reduse din articole
     *
     * @return $this
     */
    public function setDiscountedTotalCurrency($discounted_total_currency)
    {
        $this->container['discounted_total_currency'] = $discounted_total_currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets accepted
     *
     * @return bool
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     *
     * @param bool $accepted accepted
     *
     * @return $this
     */
    public function setAccepted($accepted)
    {
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets accepted_date
     *
     * @return \DateTime
     */
    public function getAcceptedDate()
    {
        return $this->container['accepted_date'];
    }

    /**
     * Sets accepted_date
     *
     * @param \DateTime $accepted_date accepted_date
     *
     * @return $this
     */
    public function setAcceptedDate($accepted_date)
    {
        $this->container['accepted_date'] = $accepted_date;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool $sent sent
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets sent_date
     *
     * @return \DateTime
     */
    public function getSentDate()
    {
        return $this->container['sent_date'];
    }

    /**
     * Sets sent_date
     *
     * @param \DateTime $sent_date sent_date
     *
     * @return $this
     */
    public function setSentDate($sent_date)
    {
        $this->container['sent_date'] = $sent_date;

        return $this;
    }

    /**
     * Gets markup
     *
     * @return string
     */
    public function getMarkup()
    {
        return $this->container['markup'];
    }

    /**
     * Sets markup
     *
     * @param string $markup markup
     *
     * @return $this
     */
    public function setMarkup($markup)
    {
        $this->container['markup'] = $markup;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets show_totals
     *
     * @return string
     */
    public function getShowTotals()
    {
        return $this->container['show_totals'];
    }

    /**
     * Sets show_totals
     *
     * @param string $show_totals show_totals
     *
     * @return $this
     */
    public function setShowTotals($show_totals)
    {
        $this->container['show_totals'] = $show_totals;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\OfferItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\OfferItem[] $items 
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


