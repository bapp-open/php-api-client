<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description Product(id, company, unit, category, type, variation_of, currency, name, price, discountable, tax, code, code_ean, active, minimum_stock, former_product_id, extra)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'category' => 'int',
        'type' => 'int',
        'currency' => 'string',
        'unit' => 'string',
        'name' => 'string',
        'price' => 'string',
        'discountable' => 'bool',
        'tax' => 'string',
        'code' => 'string',
        'code_ean' => 'string',
        'former_product_id' => 'int',
        'active' => 'bool',
        'minimum_stock' => 'string',
        'components' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'category' => null,
        'type' => null,
        'currency' => null,
        'unit' => null,
        'name' => null,
        'price' => 'decimal',
        'discountable' => null,
        'tax' => 'decimal',
        'code' => null,
        'code_ean' => null,
        'former_product_id' => null,
        'active' => null,
        'minimum_stock' => 'decimal',
        'components' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category' => 'category',
        'type' => 'type',
        'currency' => 'currency',
        'unit' => 'unit',
        'name' => 'name',
        'price' => 'price',
        'discountable' => 'discountable',
        'tax' => 'tax',
        'code' => 'code',
        'code_ean' => 'code_ean',
        'former_product_id' => 'former_product_id',
        'active' => 'active',
        'minimum_stock' => 'minimum_stock',
        'components' => 'components'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category' => 'setCategory',
        'type' => 'setType',
        'currency' => 'setCurrency',
        'unit' => 'setUnit',
        'name' => 'setName',
        'price' => 'setPrice',
        'discountable' => 'setDiscountable',
        'tax' => 'setTax',
        'code' => 'setCode',
        'code_ean' => 'setCodeEan',
        'former_product_id' => 'setFormerProductId',
        'active' => 'setActive',
        'minimum_stock' => 'setMinimumStock',
        'components' => 'setComponents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category' => 'getCategory',
        'type' => 'getType',
        'currency' => 'getCurrency',
        'unit' => 'getUnit',
        'name' => 'getName',
        'price' => 'getPrice',
        'discountable' => 'getDiscountable',
        'tax' => 'getTax',
        'code' => 'getCode',
        'code_ean' => 'getCodeEan',
        'former_product_id' => 'getFormerProductId',
        'active' => 'getActive',
        'minimum_stock' => 'getMinimumStock',
        'components' => 'getComponents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['discountable'] = isset($data['discountable']) ? $data['discountable'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['code_ean'] = isset($data['code_ean']) ? $data['code_ean'] : null;
        $this->container['former_product_id'] = isset($data['former_product_id']) ? $data['former_product_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['minimum_stock'] = isset($data['minimum_stock']) ? $data['minimum_stock'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ((mb_strlen($this->container['unit']) > 20)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 40)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['code_ean']) && (mb_strlen($this->container['code_ean']) > 40)) {
            $invalidProperties[] = "invalid value for 'code_ean', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['former_product_id']) && ($this->container['former_product_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'former_product_id', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['former_product_id']) && ($this->container['former_product_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'former_product_id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if ((mb_strlen($unit) > 20)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Product., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling Product., must be bigger than or equal to 1.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Product., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Product., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets discountable
     *
     * @return bool
     */
    public function getDiscountable()
    {
        return $this->container['discountable'];
    }

    /**
     * Sets discountable
     *
     * @param bool $discountable discountable
     *
     * @return $this
     */
    public function setDiscountable($discountable)
    {
        $this->container['discountable'] = $discountable;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 40)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Product., must be smaller than or equal to 40.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets code_ean
     *
     * @return string
     */
    public function getCodeEan()
    {
        return $this->container['code_ean'];
    }

    /**
     * Sets code_ean
     *
     * @param string $code_ean code_ean
     *
     * @return $this
     */
    public function setCodeEan($code_ean)
    {
        if (!is_null($code_ean) && (mb_strlen($code_ean) > 40)) {
            throw new \InvalidArgumentException('invalid length for $code_ean when calling Product., must be smaller than or equal to 40.');
        }

        $this->container['code_ean'] = $code_ean;

        return $this;
    }

    /**
     * Gets former_product_id
     *
     * @return int
     */
    public function getFormerProductId()
    {
        return $this->container['former_product_id'];
    }

    /**
     * Sets former_product_id
     *
     * @param int $former_product_id former_product_id
     *
     * @return $this
     */
    public function setFormerProductId($former_product_id)
    {

        if (!is_null($former_product_id) && ($former_product_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $former_product_id when calling Product., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($former_product_id) && ($former_product_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $former_product_id when calling Product., must be bigger than or equal to 0.');
        }

        $this->container['former_product_id'] = $former_product_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets minimum_stock
     *
     * @return string
     */
    public function getMinimumStock()
    {
        return $this->container['minimum_stock'];
    }

    /**
     * Sets minimum_stock
     *
     * @param string $minimum_stock Folosit pentru a genera alerte de stock
     *
     * @return $this
     */
    public function setMinimumStock($minimum_stock)
    {
        $this->container['minimum_stock'] = $minimum_stock;

        return $this;
    }

    /**
     * Gets components
     *
     * @return int[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param int[] $components components
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


