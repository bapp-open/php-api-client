<?php
/**
 * OfferItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferItem Class Doc Comment
 *
 * @category Class
 * @description OfferItem(id, company, offer, varies_from, product, chosen, name, unit, code, code_ean, quantity, price_currency, undiscounted_price_currency, tax, discount)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'product' => 'int',
        'name' => 'string',
        'code' => 'string',
        'code_ean' => 'string',
        'unit' => 'string',
        'quantity' => 'string',
        'tax' => 'string',
        'discount' => 'string',
        'price_currency' => 'string',
        'undiscounted_price_currency' => 'string',
        'production_items_count' => 'string',
        'varies_from' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'product' => null,
        'name' => null,
        'code' => null,
        'code_ean' => null,
        'unit' => null,
        'quantity' => 'decimal',
        'tax' => 'decimal',
        'discount' => 'decimal',
        'price_currency' => 'decimal',
        'undiscounted_price_currency' => 'decimal',
        'production_items_count' => null,
        'varies_from' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product' => 'product',
        'name' => 'name',
        'code' => 'code',
        'code_ean' => 'code_ean',
        'unit' => 'unit',
        'quantity' => 'quantity',
        'tax' => 'tax',
        'discount' => 'discount',
        'price_currency' => 'price_currency',
        'undiscounted_price_currency' => 'undiscounted_price_currency',
        'production_items_count' => 'production_items_count',
        'varies_from' => 'varies_from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product' => 'setProduct',
        'name' => 'setName',
        'code' => 'setCode',
        'code_ean' => 'setCodeEan',
        'unit' => 'setUnit',
        'quantity' => 'setQuantity',
        'tax' => 'setTax',
        'discount' => 'setDiscount',
        'price_currency' => 'setPriceCurrency',
        'undiscounted_price_currency' => 'setUndiscountedPriceCurrency',
        'production_items_count' => 'setProductionItemsCount',
        'varies_from' => 'setVariesFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product' => 'getProduct',
        'name' => 'getName',
        'code' => 'getCode',
        'code_ean' => 'getCodeEan',
        'unit' => 'getUnit',
        'quantity' => 'getQuantity',
        'tax' => 'getTax',
        'discount' => 'getDiscount',
        'price_currency' => 'getPriceCurrency',
        'undiscounted_price_currency' => 'getUndiscountedPriceCurrency',
        'production_items_count' => 'getProductionItemsCount',
        'varies_from' => 'getVariesFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['code_ean'] = isset($data['code_ean']) ? $data['code_ean'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['price_currency'] = isset($data['price_currency']) ? $data['price_currency'] : null;
        $this->container['undiscounted_price_currency'] = isset($data['undiscounted_price_currency']) ? $data['undiscounted_price_currency'] : null;
        $this->container['production_items_count'] = isset($data['production_items_count']) ? $data['production_items_count'] : null;
        $this->container['varies_from'] = isset($data['varies_from']) ? $data['varies_from'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 200)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['code_ean']) && (mb_strlen($this->container['code_ean']) > 200)) {
            $invalidProperties[] = "invalid value for 'code_ean', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 20)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        if ($this->container['price_currency'] === null) {
            $invalidProperties[] = "'price_currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OfferItem., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OfferItem., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $code when calling OfferItem., must be smaller than or equal to 200.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets code_ean
     *
     * @return string
     */
    public function getCodeEan()
    {
        return $this->container['code_ean'];
    }

    /**
     * Sets code_ean
     *
     * @param string $code_ean code_ean
     *
     * @return $this
     */
    public function setCodeEan($code_ean)
    {
        if (!is_null($code_ean) && (mb_strlen($code_ean) > 200)) {
            throw new \InvalidArgumentException('invalid length for $code_ean when calling OfferItem., must be smaller than or equal to 200.');
        }

        $this->container['code_ean'] = $code_ean;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 20)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling OfferItem., must be smaller than or equal to 20.');
        }
        if (!is_null($unit) && (mb_strlen($unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling OfferItem., must be bigger than or equal to 1.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets price_currency
     *
     * @return string
     */
    public function getPriceCurrency()
    {
        return $this->container['price_currency'];
    }

    /**
     * Sets price_currency
     *
     * @param string $price_currency price_currency
     *
     * @return $this
     */
    public function setPriceCurrency($price_currency)
    {
        $this->container['price_currency'] = $price_currency;

        return $this;
    }

    /**
     * Gets undiscounted_price_currency
     *
     * @return string
     */
    public function getUndiscountedPriceCurrency()
    {
        return $this->container['undiscounted_price_currency'];
    }

    /**
     * Sets undiscounted_price_currency
     *
     * @param string $undiscounted_price_currency undiscounted_price_currency
     *
     * @return $this
     */
    public function setUndiscountedPriceCurrency($undiscounted_price_currency)
    {
        $this->container['undiscounted_price_currency'] = $undiscounted_price_currency;

        return $this;
    }

    /**
     * Gets production_items_count
     *
     * @return string
     */
    public function getProductionItemsCount()
    {
        return $this->container['production_items_count'];
    }

    /**
     * Sets production_items_count
     *
     * @param string $production_items_count production_items_count
     *
     * @return $this
     */
    public function setProductionItemsCount($production_items_count)
    {
        $this->container['production_items_count'] = $production_items_count;

        return $this;
    }

    /**
     * Gets varies_from
     *
     * @return int
     */
    public function getVariesFrom()
    {
        return $this->container['varies_from'];
    }

    /**
     * Sets varies_from
     *
     * @param int $varies_from varies_from
     *
     * @return $this
     */
    public function setVariesFrom($varies_from)
    {
        $this->container['varies_from'] = $varies_from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


