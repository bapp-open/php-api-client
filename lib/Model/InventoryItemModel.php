<?php
/**
 * InventoryItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InventoryItemModel Class Doc Comment
 *
 * @category Class
 * @description InventoryItem(id, created_at, modified_at, company, parent, product, name, unit, price, quantity_db, quantity_actual, quantity_difference, accounting, inventory, difference, depreciation, reason)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent' => 'int',
        'product' => 'int',
        'name' => 'string',
        'unit' => 'string',
        'price' => 'string',
        'quantity_db' => 'string',
        'quantity_actual' => 'string',
        'quantity_difference' => 'string',
        'accounting' => 'string',
        'inventory' => 'string',
        'difference' => 'string',
        'depreciation' => 'string',
        'reason' => 'string',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'parent' => null,
        'product' => null,
        'name' => null,
        'unit' => null,
        'price' => 'decimal',
        'quantity_db' => 'decimal',
        'quantity_actual' => 'decimal',
        'quantity_difference' => 'decimal',
        'accounting' => 'decimal',
        'inventory' => 'decimal',
        'difference' => 'decimal',
        'depreciation' => 'decimal',
        'reason' => null,
        'created_at' => 'date-time',
        'modified_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent' => 'parent',
        'product' => 'product',
        'name' => 'name',
        'unit' => 'unit',
        'price' => 'price',
        'quantity_db' => 'quantity_db',
        'quantity_actual' => 'quantity_actual',
        'quantity_difference' => 'quantity_difference',
        'accounting' => 'accounting',
        'inventory' => 'inventory',
        'difference' => 'difference',
        'depreciation' => 'depreciation',
        'reason' => 'reason',
        'created_at' => 'created_at',
        'modified_at' => 'modified_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent' => 'setParent',
        'product' => 'setProduct',
        'name' => 'setName',
        'unit' => 'setUnit',
        'price' => 'setPrice',
        'quantity_db' => 'setQuantityDb',
        'quantity_actual' => 'setQuantityActual',
        'quantity_difference' => 'setQuantityDifference',
        'accounting' => 'setAccounting',
        'inventory' => 'setInventory',
        'difference' => 'setDifference',
        'depreciation' => 'setDepreciation',
        'reason' => 'setReason',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent' => 'getParent',
        'product' => 'getProduct',
        'name' => 'getName',
        'unit' => 'getUnit',
        'price' => 'getPrice',
        'quantity_db' => 'getQuantityDb',
        'quantity_actual' => 'getQuantityActual',
        'quantity_difference' => 'getQuantityDifference',
        'accounting' => 'getAccounting',
        'inventory' => 'getInventory',
        'difference' => 'getDifference',
        'depreciation' => 'getDepreciation',
        'reason' => 'getReason',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['quantity_db'] = isset($data['quantity_db']) ? $data['quantity_db'] : null;
        $this->container['quantity_actual'] = isset($data['quantity_actual']) ? $data['quantity_actual'] : null;
        $this->container['quantity_difference'] = isset($data['quantity_difference']) ? $data['quantity_difference'] : null;
        $this->container['accounting'] = isset($data['accounting']) ? $data['accounting'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['difference'] = isset($data['difference']) ? $data['difference'] : null;
        $this->container['depreciation'] = isset($data['depreciation']) ? $data['depreciation'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parent'] === null) {
            $invalidProperties[] = "'parent' can't be null";
        }
        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity_actual'] === null) {
            $invalidProperties[] = "'quantity_actual' can't be null";
        }
        if (!is_null($this->container['reason']) && (mb_strlen($this->container['reason']) > 300)) {
            $invalidProperties[] = "invalid value for 'reason', the character length must be smaller than or equal to 300.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return int
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param int $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {

        if (!is_null($name) && (mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling InventoryItemModel., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {

        if (!is_null($unit) && (mb_strlen($unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling InventoryItemModel., must be bigger than or equal to 1.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Preț RON
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity_db
     *
     * @return string
     */
    public function getQuantityDb()
    {
        return $this->container['quantity_db'];
    }

    /**
     * Sets quantity_db
     *
     * @param string $quantity_db quantity_db
     *
     * @return $this
     */
    public function setQuantityDb($quantity_db)
    {
        $this->container['quantity_db'] = $quantity_db;

        return $this;
    }

    /**
     * Gets quantity_actual
     *
     * @return string
     */
    public function getQuantityActual()
    {
        return $this->container['quantity_actual'];
    }

    /**
     * Sets quantity_actual
     *
     * @param string $quantity_actual quantity_actual
     *
     * @return $this
     */
    public function setQuantityActual($quantity_actual)
    {
        $this->container['quantity_actual'] = $quantity_actual;

        return $this;
    }

    /**
     * Gets quantity_difference
     *
     * @return string
     */
    public function getQuantityDifference()
    {
        return $this->container['quantity_difference'];
    }

    /**
     * Sets quantity_difference
     *
     * @param string $quantity_difference quantity_difference
     *
     * @return $this
     */
    public function setQuantityDifference($quantity_difference)
    {
        $this->container['quantity_difference'] = $quantity_difference;

        return $this;
    }

    /**
     * Gets accounting
     *
     * @return string
     */
    public function getAccounting()
    {
        return $this->container['accounting'];
    }

    /**
     * Sets accounting
     *
     * @param string $accounting accounting
     *
     * @return $this
     */
    public function setAccounting($accounting)
    {
        $this->container['accounting'] = $accounting;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return string
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param string $inventory inventory
     *
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets difference
     *
     * @return string
     */
    public function getDifference()
    {
        return $this->container['difference'];
    }

    /**
     * Sets difference
     *
     * @param string $difference difference
     *
     * @return $this
     */
    public function setDifference($difference)
    {
        $this->container['difference'] = $difference;

        return $this;
    }

    /**
     * Gets depreciation
     *
     * @return string
     */
    public function getDepreciation()
    {
        return $this->container['depreciation'];
    }

    /**
     * Sets depreciation
     *
     * @param string $depreciation depreciation
     *
     * @return $this
     */
    public function setDepreciation($depreciation)
    {
        $this->container['depreciation'] = $depreciation;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        if (!is_null($reason) && (mb_strlen($reason) > 300)) {
            throw new \InvalidArgumentException('invalid length for $reason when calling InventoryItemModel., must be smaller than or equal to 300.');
        }

        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which this record was added
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime $modified_at Date and time at which this record was modified
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


