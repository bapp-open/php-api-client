<?php
/**
 * GCMDevice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GCMDevice Class Doc Comment
 *
 * @category Class
 * @description GCMDevice(id, name, active, user, date_created, application_id, device_id, registration_id, cloud_message_type)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GCMDevice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GCMDevice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'registration_id' => 'string',
        'device_id' => 'int',
        'active' => 'bool',
        'date_created' => '\DateTime',
        'cloud_message_type' => 'string',
        'application_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'registration_id' => null,
        'device_id' => null,
        'active' => null,
        'date_created' => 'date-time',
        'cloud_message_type' => null,
        'application_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'registration_id' => 'registration_id',
        'device_id' => 'device_id',
        'active' => 'active',
        'date_created' => 'date_created',
        'cloud_message_type' => 'cloud_message_type',
        'application_id' => 'application_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'registration_id' => 'setRegistrationId',
        'device_id' => 'setDeviceId',
        'active' => 'setActive',
        'date_created' => 'setDateCreated',
        'cloud_message_type' => 'setCloudMessageType',
        'application_id' => 'setApplicationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'registration_id' => 'getRegistrationId',
        'device_id' => 'getDeviceId',
        'active' => 'getActive',
        'date_created' => 'getDateCreated',
        'cloud_message_type' => 'getCloudMessageType',
        'application_id' => 'getApplicationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CLOUD_MESSAGE_TYPE_FCM = 'FCM';
    const CLOUD_MESSAGE_TYPE_GCM = 'GCM';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCloudMessageTypeAllowableValues()
    {
        return [
            self::CLOUD_MESSAGE_TYPE_FCM,
            self::CLOUD_MESSAGE_TYPE_GCM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['registration_id'] = isset($data['registration_id']) ? $data['registration_id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['cloud_message_type'] = isset($data['cloud_message_type']) ? $data['cloud_message_type'] : null;
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['registration_id'] === null) {
            $invalidProperties[] = "'registration_id' can't be null";
        }
        if ((mb_strlen($this->container['registration_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'registration_id', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getCloudMessageTypeAllowableValues();
        if (!is_null($this->container['cloud_message_type']) && !in_array($this->container['cloud_message_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cloud_message_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['application_id']) && (mb_strlen($this->container['application_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'application_id', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling GCMDevice., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets registration_id
     *
     * @return string
     */
    public function getRegistrationId()
    {
        return $this->container['registration_id'];
    }

    /**
     * Sets registration_id
     *
     * @param string $registration_id registration_id
     *
     * @return $this
     */
    public function setRegistrationId($registration_id)
    {

        if ((mb_strlen($registration_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $registration_id when calling GCMDevice., must be bigger than or equal to 1.');
        }

        $this->container['registration_id'] = $registration_id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return int
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param int $device_id ANDROID_ID / TelephonyManager.getDeviceId() (e.g: 0x01)
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Inactive devices will not be sent notifications
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets cloud_message_type
     *
     * @return string
     */
    public function getCloudMessageType()
    {
        return $this->container['cloud_message_type'];
    }

    /**
     * Sets cloud_message_type
     *
     * @param string $cloud_message_type You should choose FCM or GCM
     *
     * @return $this
     */
    public function setCloudMessageType($cloud_message_type)
    {
        $allowedValues = $this->getCloudMessageTypeAllowableValues();
        if (!is_null($cloud_message_type) && !in_array($cloud_message_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cloud_message_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cloud_message_type'] = $cloud_message_type;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string $application_id Opaque application identity, should be filled in for multiple key/certificate access
     *
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        if (!is_null($application_id) && (mb_strlen($application_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling GCMDevice., must be smaller than or equal to 64.');
        }

        $this->container['application_id'] = $application_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


