<?php
/**
 * Queue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Queue Class Doc Comment
 *
 * @category Class
 * @description Queue(id, company, parent, name, description, escalate_days, department, allow_public_submission, new_ticket_cc, updated_ticket_cc, project, service, partner, identifier)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Queue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Queue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent' => 'int',
        'name' => 'string',
        'description' => 'string',
        'escalate_days' => 'int',
        'default_owners' => 'int[]',
        'department' => 'int',
        'identifier' => 'string',
        'allow_public_submission' => 'bool',
        'new_ticket_cc' => 'string[]',
        'updated_ticket_cc' => 'string[]',
        'project' => 'int',
        'service' => 'int',
        'partner' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'parent' => null,
        'name' => null,
        'description' => null,
        'escalate_days' => null,
        'default_owners' => null,
        'department' => null,
        'identifier' => 'uuid',
        'allow_public_submission' => null,
        'new_ticket_cc' => 'email',
        'updated_ticket_cc' => 'email',
        'project' => null,
        'service' => null,
        'partner' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent' => 'parent',
        'name' => 'name',
        'description' => 'description',
        'escalate_days' => 'escalate_days',
        'default_owners' => 'default_owners',
        'department' => 'department',
        'identifier' => 'identifier',
        'allow_public_submission' => 'allow_public_submission',
        'new_ticket_cc' => 'new_ticket_cc',
        'updated_ticket_cc' => 'updated_ticket_cc',
        'project' => 'project',
        'service' => 'service',
        'partner' => 'partner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent' => 'setParent',
        'name' => 'setName',
        'description' => 'setDescription',
        'escalate_days' => 'setEscalateDays',
        'default_owners' => 'setDefaultOwners',
        'department' => 'setDepartment',
        'identifier' => 'setIdentifier',
        'allow_public_submission' => 'setAllowPublicSubmission',
        'new_ticket_cc' => 'setNewTicketCc',
        'updated_ticket_cc' => 'setUpdatedTicketCc',
        'project' => 'setProject',
        'service' => 'setService',
        'partner' => 'setPartner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent' => 'getParent',
        'name' => 'getName',
        'description' => 'getDescription',
        'escalate_days' => 'getEscalateDays',
        'default_owners' => 'getDefaultOwners',
        'department' => 'getDepartment',
        'identifier' => 'getIdentifier',
        'allow_public_submission' => 'getAllowPublicSubmission',
        'new_ticket_cc' => 'getNewTicketCc',
        'updated_ticket_cc' => 'getUpdatedTicketCc',
        'project' => 'getProject',
        'service' => 'getService',
        'partner' => 'getPartner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['escalate_days'] = isset($data['escalate_days']) ? $data['escalate_days'] : null;
        $this->container['default_owners'] = isset($data['default_owners']) ? $data['default_owners'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['allow_public_submission'] = isset($data['allow_public_submission']) ? $data['allow_public_submission'] : null;
        $this->container['new_ticket_cc'] = isset($data['new_ticket_cc']) ? $data['new_ticket_cc'] : null;
        $this->container['updated_ticket_cc'] = isset($data['updated_ticket_cc']) ? $data['updated_ticket_cc'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['escalate_days']) && ($this->container['escalate_days'] > 32767)) {
            $invalidProperties[] = "invalid value for 'escalate_days', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['escalate_days']) && ($this->container['escalate_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'escalate_days', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return int
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param int $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Queue., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Queue., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets escalate_days
     *
     * @return int
     */
    public function getEscalateDays()
    {
        return $this->container['escalate_days'];
    }

    /**
     * Sets escalate_days
     *
     * @param int $escalate_days escalate_days
     *
     * @return $this
     */
    public function setEscalateDays($escalate_days)
    {

        if (!is_null($escalate_days) && ($escalate_days > 32767)) {
            throw new \InvalidArgumentException('invalid value for $escalate_days when calling Queue., must be smaller than or equal to 32767.');
        }
        if (!is_null($escalate_days) && ($escalate_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $escalate_days when calling Queue., must be bigger than or equal to 0.');
        }

        $this->container['escalate_days'] = $escalate_days;

        return $this;
    }

    /**
     * Gets default_owners
     *
     * @return int[]
     */
    public function getDefaultOwners()
    {
        return $this->container['default_owners'];
    }

    /**
     * Sets default_owners
     *
     * @param int[] $default_owners default_owners
     *
     * @return $this
     */
    public function setDefaultOwners($default_owners)
    {
        $this->container['default_owners'] = $default_owners;

        return $this;
    }

    /**
     * Gets department
     *
     * @return int
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param int $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets allow_public_submission
     *
     * @return bool
     */
    public function getAllowPublicSubmission()
    {
        return $this->container['allow_public_submission'];
    }

    /**
     * Sets allow_public_submission
     *
     * @param bool $allow_public_submission allow_public_submission
     *
     * @return $this
     */
    public function setAllowPublicSubmission($allow_public_submission)
    {
        $this->container['allow_public_submission'] = $allow_public_submission;

        return $this;
    }

    /**
     * Gets new_ticket_cc
     *
     * @return string[]
     */
    public function getNewTicketCc()
    {
        return $this->container['new_ticket_cc'];
    }

    /**
     * Sets new_ticket_cc
     *
     * @param string[] $new_ticket_cc 
     *
     * @return $this
     */
    public function setNewTicketCc($new_ticket_cc)
    {
        $this->container['new_ticket_cc'] = $new_ticket_cc;

        return $this;
    }

    /**
     * Gets updated_ticket_cc
     *
     * @return string[]
     */
    public function getUpdatedTicketCc()
    {
        return $this->container['updated_ticket_cc'];
    }

    /**
     * Sets updated_ticket_cc
     *
     * @param string[] $updated_ticket_cc 
     *
     * @return $this
     */
    public function setUpdatedTicketCc($updated_ticket_cc)
    {
        $this->container['updated_ticket_cc'] = $updated_ticket_cc;

        return $this;
    }

    /**
     * Gets project
     *
     * @return int
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param int $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets service
     *
     * @return int
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param int $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


