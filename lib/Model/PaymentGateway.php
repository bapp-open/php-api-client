<?php
/**
 * PaymentGateway
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentGateway Class Doc Comment
 *
 * @category Class
 * @description PaymentGateway(id, provider, name, config_keys, json_schema, accepted_currencies, flow, import_path, enabled)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentGateway implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentGateway';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'provider' => 'string',
        'name' => 'string',
        'config_keys' => 'string[]',
        'json_schema' => 'object',
        'flow' => 'string',
        'accepted_currencies' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'provider' => null,
        'name' => null,
        'config_keys' => null,
        'json_schema' => null,
        'flow' => null,
        'accepted_currencies' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'provider' => 'provider',
        'name' => 'name',
        'config_keys' => 'config_keys',
        'json_schema' => 'json_schema',
        'flow' => 'flow',
        'accepted_currencies' => 'accepted_currencies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'provider' => 'setProvider',
        'name' => 'setName',
        'config_keys' => 'setConfigKeys',
        'json_schema' => 'setJsonSchema',
        'flow' => 'setFlow',
        'accepted_currencies' => 'setAcceptedCurrencies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'provider' => 'getProvider',
        'name' => 'getName',
        'config_keys' => 'getConfigKeys',
        'json_schema' => 'getJsonSchema',
        'flow' => 'getFlow',
        'accepted_currencies' => 'getAcceptedCurrencies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['config_keys'] = isset($data['config_keys']) ? $data['config_keys'] : null;
        $this->container['json_schema'] = isset($data['json_schema']) ? $data['json_schema'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['accepted_currencies'] = isset($data['accepted_currencies']) ? $data['accepted_currencies'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        if ((mb_strlen($this->container['provider']) > 50)) {
            $invalidProperties[] = "invalid value for 'provider', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['provider']) < 1)) {
            $invalidProperties[] = "invalid value for 'provider', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['config_keys'] === null) {
            $invalidProperties[] = "'config_keys' can't be null";
        }
        if (!is_null($this->container['flow']) && (mb_strlen($this->container['flow']) < 1)) {
            $invalidProperties[] = "invalid value for 'flow', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider unique provider name
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        if ((mb_strlen($provider) > 50)) {
            throw new \InvalidArgumentException('invalid length for $provider when calling PaymentGateway., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($provider) < 1)) {
            throw new \InvalidArgumentException('invalid length for $provider when calling PaymentGateway., must be bigger than or equal to 1.');
        }

        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name display name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PaymentGateway., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PaymentGateway., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets config_keys
     *
     * @return string[]
     */
    public function getConfigKeys()
    {
        return $this->container['config_keys'];
    }

    /**
     * Sets config_keys
     *
     * @param string[] $config_keys 
     *
     * @return $this
     */
    public function setConfigKeys($config_keys)
    {
        $this->container['config_keys'] = $config_keys;

        return $this;
    }

    /**
     * Gets json_schema
     *
     * @return object
     */
    public function getJsonSchema()
    {
        return $this->container['json_schema'];
    }

    /**
     * Sets json_schema
     *
     * @param object $json_schema dict with fields for frontend (jsonforms.io)
     *
     * @return $this
     */
    public function setJsonSchema($json_schema)
    {
        $this->container['json_schema'] = $json_schema;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return string
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param string $flow flow
     *
     * @return $this
     */
    public function setFlow($flow)
    {

        if (!is_null($flow) && (mb_strlen($flow) < 1)) {
            throw new \InvalidArgumentException('invalid length for $flow when calling PaymentGateway., must be bigger than or equal to 1.');
        }

        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets accepted_currencies
     *
     * @return string[]
     */
    public function getAcceptedCurrencies()
    {
        return $this->container['accepted_currencies'];
    }

    /**
     * Sets accepted_currencies
     *
     * @param string[] $accepted_currencies 
     *
     * @return $this
     */
    public function setAcceptedCurrencies($accepted_currencies)
    {
        $this->container['accepted_currencies'] = $accepted_currencies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


