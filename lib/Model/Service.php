<?php
/**
 * Service
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Service Class Doc Comment
 *
 * @category Class
 * @description Service(id, created_at, modified_at, snapshot, company, partner, product, package, package_category, currency, flow, type, status, interval, price, next_occurrence, occurrences, occurrences_performed, description, send_to_emails, send_to_partner)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Service implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime',
        'snapshot' => 'object',
        'flow' => 'int',
        'type' => 'int',
        'status' => 'int',
        'interval' => 'int',
        'price' => 'string',
        'next_occurrence' => '\DateTime',
        'occurrences' => 'int',
        'occurrences_performed' => 'int',
        'description' => 'string',
        'send_to_emails' => 'string[]',
        'send_to_partner' => 'bool',
        'partner' => 'int',
        'product' => 'int',
        'package' => 'int',
        'package_category' => 'int',
        'currency' => 'string',
        'fiscal_invoices' => 'int[]',
        'proforma_invoices' => 'int[]',
        'send_to_contacts' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'modified_at' => 'date-time',
        'snapshot' => null,
        'flow' => null,
        'type' => null,
        'status' => null,
        'interval' => null,
        'price' => 'decimal',
        'next_occurrence' => 'date',
        'occurrences' => null,
        'occurrences_performed' => null,
        'description' => null,
        'send_to_emails' => 'email',
        'send_to_partner' => null,
        'partner' => null,
        'product' => null,
        'package' => null,
        'package_category' => null,
        'currency' => null,
        'fiscal_invoices' => null,
        'proforma_invoices' => null,
        'send_to_contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'modified_at' => 'modified_at',
        'snapshot' => 'snapshot',
        'flow' => 'flow',
        'type' => 'type',
        'status' => 'status',
        'interval' => 'interval',
        'price' => 'price',
        'next_occurrence' => 'next_occurrence',
        'occurrences' => 'occurrences',
        'occurrences_performed' => 'occurrences_performed',
        'description' => 'description',
        'send_to_emails' => 'send_to_emails',
        'send_to_partner' => 'send_to_partner',
        'partner' => 'partner',
        'product' => 'product',
        'package' => 'package',
        'package_category' => 'package_category',
        'currency' => 'currency',
        'fiscal_invoices' => 'fiscal_invoices',
        'proforma_invoices' => 'proforma_invoices',
        'send_to_contacts' => 'send_to_contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'snapshot' => 'setSnapshot',
        'flow' => 'setFlow',
        'type' => 'setType',
        'status' => 'setStatus',
        'interval' => 'setInterval',
        'price' => 'setPrice',
        'next_occurrence' => 'setNextOccurrence',
        'occurrences' => 'setOccurrences',
        'occurrences_performed' => 'setOccurrencesPerformed',
        'description' => 'setDescription',
        'send_to_emails' => 'setSendToEmails',
        'send_to_partner' => 'setSendToPartner',
        'partner' => 'setPartner',
        'product' => 'setProduct',
        'package' => 'setPackage',
        'package_category' => 'setPackageCategory',
        'currency' => 'setCurrency',
        'fiscal_invoices' => 'setFiscalInvoices',
        'proforma_invoices' => 'setProformaInvoices',
        'send_to_contacts' => 'setSendToContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'snapshot' => 'getSnapshot',
        'flow' => 'getFlow',
        'type' => 'getType',
        'status' => 'getStatus',
        'interval' => 'getInterval',
        'price' => 'getPrice',
        'next_occurrence' => 'getNextOccurrence',
        'occurrences' => 'getOccurrences',
        'occurrences_performed' => 'getOccurrencesPerformed',
        'description' => 'getDescription',
        'send_to_emails' => 'getSendToEmails',
        'send_to_partner' => 'getSendToPartner',
        'partner' => 'getPartner',
        'product' => 'getProduct',
        'package' => 'getPackage',
        'package_category' => 'getPackageCategory',
        'currency' => 'getCurrency',
        'fiscal_invoices' => 'getFiscalInvoices',
        'proforma_invoices' => 'getProformaInvoices',
        'send_to_contacts' => 'getSendToContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        $this->container['snapshot'] = isset($data['snapshot']) ? $data['snapshot'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['next_occurrence'] = isset($data['next_occurrence']) ? $data['next_occurrence'] : null;
        $this->container['occurrences'] = isset($data['occurrences']) ? $data['occurrences'] : null;
        $this->container['occurrences_performed'] = isset($data['occurrences_performed']) ? $data['occurrences_performed'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['send_to_emails'] = isset($data['send_to_emails']) ? $data['send_to_emails'] : null;
        $this->container['send_to_partner'] = isset($data['send_to_partner']) ? $data['send_to_partner'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['package'] = isset($data['package']) ? $data['package'] : null;
        $this->container['package_category'] = isset($data['package_category']) ? $data['package_category'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['fiscal_invoices'] = isset($data['fiscal_invoices']) ? $data['fiscal_invoices'] : null;
        $this->container['proforma_invoices'] = isset($data['proforma_invoices']) ? $data['proforma_invoices'] : null;
        $this->container['send_to_contacts'] = isset($data['send_to_contacts']) ? $data['send_to_contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (!is_null($this->container['occurrences']) && ($this->container['occurrences'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'occurrences', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['occurrences']) && ($this->container['occurrences'] < 0)) {
            $invalidProperties[] = "invalid value for 'occurrences', must be bigger than or equal to 0.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['partner'] === null) {
            $invalidProperties[] = "'partner' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which this record was added
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime $modified_at Date and time at which this record was modified
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets snapshot
     *
     * @return object
     */
    public function getSnapshot()
    {
        return $this->container['snapshot'];
    }

    /**
     * Sets snapshot
     *
     * @param object $snapshot This field is automatically populated acting as a cache of the last modification state.
     *
     * @return $this
     */
    public function setSnapshot($snapshot)
    {
        $this->container['snapshot'] = $snapshot;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return int
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param int $flow flow
     *
     * @return $this
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets next_occurrence
     *
     * @return \DateTime
     */
    public function getNextOccurrence()
    {
        return $this->container['next_occurrence'];
    }

    /**
     * Sets next_occurrence
     *
     * @param \DateTime $next_occurrence next_occurrence
     *
     * @return $this
     */
    public function setNextOccurrence($next_occurrence)
    {
        $this->container['next_occurrence'] = $next_occurrence;

        return $this;
    }

    /**
     * Gets occurrences
     *
     * @return int
     */
    public function getOccurrences()
    {
        return $this->container['occurrences'];
    }

    /**
     * Sets occurrences
     *
     * @param int $occurrences occurrences
     *
     * @return $this
     */
    public function setOccurrences($occurrences)
    {

        if (!is_null($occurrences) && ($occurrences > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $occurrences when calling Service., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($occurrences) && ($occurrences < 0)) {
            throw new \InvalidArgumentException('invalid value for $occurrences when calling Service., must be bigger than or equal to 0.');
        }

        $this->container['occurrences'] = $occurrences;

        return $this;
    }

    /**
     * Gets occurrences_performed
     *
     * @return int
     */
    public function getOccurrencesPerformed()
    {
        return $this->container['occurrences_performed'];
    }

    /**
     * Sets occurrences_performed
     *
     * @param int $occurrences_performed occurrences_performed
     *
     * @return $this
     */
    public function setOccurrencesPerformed($occurrences_performed)
    {
        $this->container['occurrences_performed'] = $occurrences_performed;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {

        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Service., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets send_to_emails
     *
     * @return string[]
     */
    public function getSendToEmails()
    {
        return $this->container['send_to_emails'];
    }

    /**
     * Sets send_to_emails
     *
     * @param string[] $send_to_emails 
     *
     * @return $this
     */
    public function setSendToEmails($send_to_emails)
    {
        $this->container['send_to_emails'] = $send_to_emails;

        return $this;
    }

    /**
     * Gets send_to_partner
     *
     * @return bool
     */
    public function getSendToPartner()
    {
        return $this->container['send_to_partner'];
    }

    /**
     * Sets send_to_partner
     *
     * @param bool $send_to_partner send_to_partner
     *
     * @return $this
     */
    public function setSendToPartner($send_to_partner)
    {
        $this->container['send_to_partner'] = $send_to_partner;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets package
     *
     * @return int
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param int $package package
     *
     * @return $this
     */
    public function setPackage($package)
    {
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets package_category
     *
     * @return int
     */
    public function getPackageCategory()
    {
        return $this->container['package_category'];
    }

    /**
     * Sets package_category
     *
     * @param int $package_category package_category
     *
     * @return $this
     */
    public function setPackageCategory($package_category)
    {
        $this->container['package_category'] = $package_category;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fiscal_invoices
     *
     * @return int[]
     */
    public function getFiscalInvoices()
    {
        return $this->container['fiscal_invoices'];
    }

    /**
     * Sets fiscal_invoices
     *
     * @param int[] $fiscal_invoices fiscal_invoices
     *
     * @return $this
     */
    public function setFiscalInvoices($fiscal_invoices)
    {
        $this->container['fiscal_invoices'] = $fiscal_invoices;

        return $this;
    }

    /**
     * Gets proforma_invoices
     *
     * @return int[]
     */
    public function getProformaInvoices()
    {
        return $this->container['proforma_invoices'];
    }

    /**
     * Sets proforma_invoices
     *
     * @param int[] $proforma_invoices proforma_invoices
     *
     * @return $this
     */
    public function setProformaInvoices($proforma_invoices)
    {
        $this->container['proforma_invoices'] = $proforma_invoices;

        return $this;
    }

    /**
     * Gets send_to_contacts
     *
     * @return int[]
     */
    public function getSendToContacts()
    {
        return $this->container['send_to_contacts'];
    }

    /**
     * Sets send_to_contacts
     *
     * @param int[] $send_to_contacts send_to_contacts
     *
     * @return $this
     */
    public function setSendToContacts($send_to_contacts)
    {
        $this->container['send_to_contacts'] = $send_to_contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


