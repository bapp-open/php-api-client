<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @description Company(id, user, country, region, city, address, referral, personal_representative, name, logo, site_logo, pays_vat, vat_id, vat_intra, vat_at_income, reg_com, social_capital, email, website, phone, uuid, created, modules, trusted, type, caen)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Company implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'country' => 'string',
        'region' => 'int',
        'city' => 'int',
        'address' => 'string',
        'logo' => 'string',
        'pays_vat' => 'bool',
        'vat_id' => 'string',
        'vat_intra' => 'string',
        'vat_at_income' => 'bool',
        'reg_com' => 'string',
        'social_capital' => 'string',
        'email' => 'string',
        'website' => 'string',
        'enabled_modules' => 'string',
        'modules' => 'string[]',
        'site_logo' => 'string',
        'personal_representative' => 'string',
        'type' => 'string',
        'caen' => 'string',
        'storage' => 'string',
        'phone' => 'string',
        'email_alias' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'country' => null,
        'region' => null,
        'city' => null,
        'address' => null,
        'logo' => 'uri',
        'pays_vat' => null,
        'vat_id' => null,
        'vat_intra' => null,
        'vat_at_income' => null,
        'reg_com' => null,
        'social_capital' => 'decimal',
        'email' => 'email',
        'website' => null,
        'enabled_modules' => null,
        'modules' => null,
        'site_logo' => 'uri',
        'personal_representative' => 'uuid',
        'type' => null,
        'caen' => null,
        'storage' => null,
        'phone' => null,
        'email_alias' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'country' => 'country',
        'region' => 'region',
        'city' => 'city',
        'address' => 'address',
        'logo' => 'logo',
        'pays_vat' => 'pays_vat',
        'vat_id' => 'vat_id',
        'vat_intra' => 'vat_intra',
        'vat_at_income' => 'vat_at_income',
        'reg_com' => 'reg_com',
        'social_capital' => 'social_capital',
        'email' => 'email',
        'website' => 'website',
        'enabled_modules' => 'enabled_modules',
        'modules' => 'modules',
        'site_logo' => 'site_logo',
        'personal_representative' => 'personal_representative',
        'type' => 'type',
        'caen' => 'caen',
        'storage' => 'storage',
        'phone' => 'phone',
        'email_alias' => 'email_alias'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'city' => 'setCity',
        'address' => 'setAddress',
        'logo' => 'setLogo',
        'pays_vat' => 'setPaysVat',
        'vat_id' => 'setVatId',
        'vat_intra' => 'setVatIntra',
        'vat_at_income' => 'setVatAtIncome',
        'reg_com' => 'setRegCom',
        'social_capital' => 'setSocialCapital',
        'email' => 'setEmail',
        'website' => 'setWebsite',
        'enabled_modules' => 'setEnabledModules',
        'modules' => 'setModules',
        'site_logo' => 'setSiteLogo',
        'personal_representative' => 'setPersonalRepresentative',
        'type' => 'setType',
        'caen' => 'setCaen',
        'storage' => 'setStorage',
        'phone' => 'setPhone',
        'email_alias' => 'setEmailAlias'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'city' => 'getCity',
        'address' => 'getAddress',
        'logo' => 'getLogo',
        'pays_vat' => 'getPaysVat',
        'vat_id' => 'getVatId',
        'vat_intra' => 'getVatIntra',
        'vat_at_income' => 'getVatAtIncome',
        'reg_com' => 'getRegCom',
        'social_capital' => 'getSocialCapital',
        'email' => 'getEmail',
        'website' => 'getWebsite',
        'enabled_modules' => 'getEnabledModules',
        'modules' => 'getModules',
        'site_logo' => 'getSiteLogo',
        'personal_representative' => 'getPersonalRepresentative',
        'type' => 'getType',
        'caen' => 'getCaen',
        'storage' => 'getStorage',
        'phone' => 'getPhone',
        'email_alias' => 'getEmailAlias'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PF = 'PF';
    const TYPE_PFA = 'PFA';
    const TYPE__IF = 'IF';
    const TYPE_IPF = 'IPF';
    const TYPE_SOCIETATE_IN_NUME_COLECTIV = 'SocietateInNumeColectiv';
    const TYPE_SOCIETATE_IN_COMANDITA_SIMPLA = 'SocietateInComanditaSimpla';
    const TYPE_SOCIETATE_PE_ACTIUNI = 'SocietatePeActiuni';
    const TYPE_SOCIETATE_IN_COMANDITA_PE_ACTIUNI = 'SocietateInComanditaPeActiuni';
    const TYPE_SOCIETATE_CU_RASPUNDERE_LIMITATA = 'SocietateCuRaspundereLimitata';
    const TYPE_SOCIETATE_CU_RASPUNDERE_LIMITATA_DEBUTANT = 'SocietateCuRaspundereLimitataDebutant';
    const TYPE_ORGANIZATIE_COOPERATISTA_DE_CREDIT = 'OrganizatieCooperatistaDeCredit';
    const TYPE_INSTITUTII_EMITENTE_DE_MONEDA_ELECTRONICA = 'InstitutiiEmitenteDeMonedaElectronica';
    const TYPE_CASE_DE_ECONOMII_PENTRU_DOMENIUL_LOCATIV = 'CaseDeEconomiiPentruDomeniulLocativ';
    const TYPE_SUCURSALAAUNEIINSTITUTIIDECREDITSTRAINA = 'Sucursalaauneiinstitutiidecreditstraina';
    const TYPE_ALTE_INSTITUTII_DE_CREDIT = 'AlteInstitutiiDeCredit';
    const TYPE_MESTESUGAREASCA = 'Mestesugareasca';
    const TYPE_DE_CONSUM = 'DeConsum';
    const TYPE_DE_VALORIFICARE = 'DeValorificare';
    const TYPE_AGRICOLA = 'Agricola';
    const TYPE_DE_LOCUINTE = 'DeLocuinte';
    const TYPE_PESCARESTI = 'Pescaresti';
    const TYPE_DE_TRANSPORTURI = 'DeTransporturi';
    const TYPE_FORESTIERE = 'Forestiere';
    const TYPE_SINDICAT = 'Sindicat';
    const TYPE_FEDERATIESINDICALA = 'Federatiesindicala';
    const TYPE_CONFEDERATIE_SINDICALA = 'ConfederatieSindicala';
    const TYPE_UNIUNE_SINDICALA = 'UniuneSindicala';
    const TYPE_PATRONAT = 'Patronat';
    const TYPE_UNIUNE_PATRONALA = 'UniunePatronala';
    const TYPE_FEDERATIEPATRONALA = 'Federatiepatronala';
    const TYPE_ALTE_ORGANIZATII_PATRONALE = 'AlteOrganizatiiPatronale';
    const TYPE_ORGANIZATIE_SAU_ASOCIATIE_PROFESIONALA = 'OrganizatieSauAsociatieProfesionala';
    const TYPE_ASOCIATIE_DE_PROPRIETARI = 'AsociatieDeProprietari';
    const TYPE_ALTE_ORGANIZATII_SAU_ASOCIATII_CU_PERSONALITATE_JURIDICA = 'AlteOrganizatiiSauAsociatiiCuPersonalitateJuridica';
    const TYPE_ARHITECT = 'Arhitect';
    const TYPE_ASISTENT_MEDICAL = 'AsistentMedical';
    const TYPE_AUDITOR_FINANCIAR = 'AuditorFinanciar';
    const TYPE_AVOCAT = 'Avocat';
    const TYPE_CONSILIER_PROPRIETATE_INDUSTRIALA = 'ConsilierProprietateIndustriala';
    const TYPE_CONSULTANT_FISCAL = 'ConsultantFiscal';
    const TYPE_EXECUTOR_JUDECATORESC = 'ExecutorJudecatoresc';
    const TYPE_LICHIDATOR_JUDICIAR = 'LichidatorJudiciar';
    const TYPE_EXPERT_CONTABIL = 'ExpertContabil';
    const TYPE_EXPERT_VAMAL = 'ExpertVamal';
    const TYPE_FARMACIST = 'Farmacist';
    const TYPE_MEDIC = 'Medic';
    const TYPE_MEDIC_VETERINAR = 'MedicVeterinar';
    const TYPE_NOTAR_PUBLIC = 'NotarPublic';
    const TYPE_PSIHOLOG = 'Psiholog';
    const TYPE_TRADUCATOR_AUTORIZAT = 'TraducatorAutorizat';
    const TYPE_ALTE_PERSOANE_FIZICE = 'AltePersoaneFizice';
    const TYPE_ALTE_PERSOANE_JURIDICE = 'AltePersoaneJuridice';
    const TYPE_REGIE_AUTONOMA = 'RegieAutonoma';
    const TYPE_COMPANIE_NATIONALA = 'CompanieNationala';
    const TYPE_SOCIETATE_NATIONALA = 'SocietateNationala';
    const TYPE_REPREZENTANTA_DIN_ROMANIA_A_UNEI_PERSOANE_JURIDICE_STRAINE = 'ReprezentantaDinRomaniaAUneiPersoaneJuridiceStraine';
    const TYPE_INSTITUT_CULTURAL_AL_ALTUI_STAT = 'InstitutCulturalAlAltuiStat';
    const TYPE_MISINUE_DIPLOMATICA = 'MisinueDiplomatica';
    const TYPE_OFICIU_CONSULAR = 'OficiuConsular';
    const TYPE_AUTORITATE_SAU_INSTITUTIE_PUBLICA = 'AutoritateSauInstitutiePublica';
    const TYPE_FUNDATIE = 'Fundatie';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PF,
            self::TYPE_PFA,
            self::TYPE__IF,
            self::TYPE_IPF,
            self::TYPE_SOCIETATE_IN_NUME_COLECTIV,
            self::TYPE_SOCIETATE_IN_COMANDITA_SIMPLA,
            self::TYPE_SOCIETATE_PE_ACTIUNI,
            self::TYPE_SOCIETATE_IN_COMANDITA_PE_ACTIUNI,
            self::TYPE_SOCIETATE_CU_RASPUNDERE_LIMITATA,
            self::TYPE_SOCIETATE_CU_RASPUNDERE_LIMITATA_DEBUTANT,
            self::TYPE_ORGANIZATIE_COOPERATISTA_DE_CREDIT,
            self::TYPE_INSTITUTII_EMITENTE_DE_MONEDA_ELECTRONICA,
            self::TYPE_CASE_DE_ECONOMII_PENTRU_DOMENIUL_LOCATIV,
            self::TYPE_SUCURSALAAUNEIINSTITUTIIDECREDITSTRAINA,
            self::TYPE_ALTE_INSTITUTII_DE_CREDIT,
            self::TYPE_MESTESUGAREASCA,
            self::TYPE_DE_CONSUM,
            self::TYPE_DE_VALORIFICARE,
            self::TYPE_AGRICOLA,
            self::TYPE_DE_LOCUINTE,
            self::TYPE_PESCARESTI,
            self::TYPE_DE_TRANSPORTURI,
            self::TYPE_FORESTIERE,
            self::TYPE_SINDICAT,
            self::TYPE_FEDERATIESINDICALA,
            self::TYPE_CONFEDERATIE_SINDICALA,
            self::TYPE_UNIUNE_SINDICALA,
            self::TYPE_PATRONAT,
            self::TYPE_UNIUNE_PATRONALA,
            self::TYPE_FEDERATIEPATRONALA,
            self::TYPE_ALTE_ORGANIZATII_PATRONALE,
            self::TYPE_ORGANIZATIE_SAU_ASOCIATIE_PROFESIONALA,
            self::TYPE_ASOCIATIE_DE_PROPRIETARI,
            self::TYPE_ALTE_ORGANIZATII_SAU_ASOCIATII_CU_PERSONALITATE_JURIDICA,
            self::TYPE_ARHITECT,
            self::TYPE_ASISTENT_MEDICAL,
            self::TYPE_AUDITOR_FINANCIAR,
            self::TYPE_AVOCAT,
            self::TYPE_CONSILIER_PROPRIETATE_INDUSTRIALA,
            self::TYPE_CONSULTANT_FISCAL,
            self::TYPE_EXECUTOR_JUDECATORESC,
            self::TYPE_LICHIDATOR_JUDICIAR,
            self::TYPE_EXPERT_CONTABIL,
            self::TYPE_EXPERT_VAMAL,
            self::TYPE_FARMACIST,
            self::TYPE_MEDIC,
            self::TYPE_MEDIC_VETERINAR,
            self::TYPE_NOTAR_PUBLIC,
            self::TYPE_PSIHOLOG,
            self::TYPE_TRADUCATOR_AUTORIZAT,
            self::TYPE_ALTE_PERSOANE_FIZICE,
            self::TYPE_ALTE_PERSOANE_JURIDICE,
            self::TYPE_REGIE_AUTONOMA,
            self::TYPE_COMPANIE_NATIONALA,
            self::TYPE_SOCIETATE_NATIONALA,
            self::TYPE_REPREZENTANTA_DIN_ROMANIA_A_UNEI_PERSOANE_JURIDICE_STRAINE,
            self::TYPE_INSTITUT_CULTURAL_AL_ALTUI_STAT,
            self::TYPE_MISINUE_DIPLOMATICA,
            self::TYPE_OFICIU_CONSULAR,
            self::TYPE_AUTORITATE_SAU_INSTITUTIE_PUBLICA,
            self::TYPE_FUNDATIE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['pays_vat'] = isset($data['pays_vat']) ? $data['pays_vat'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['vat_intra'] = isset($data['vat_intra']) ? $data['vat_intra'] : null;
        $this->container['vat_at_income'] = isset($data['vat_at_income']) ? $data['vat_at_income'] : null;
        $this->container['reg_com'] = isset($data['reg_com']) ? $data['reg_com'] : null;
        $this->container['social_capital'] = isset($data['social_capital']) ? $data['social_capital'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['enabled_modules'] = isset($data['enabled_modules']) ? $data['enabled_modules'] : null;
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
        $this->container['site_logo'] = isset($data['site_logo']) ? $data['site_logo'] : null;
        $this->container['personal_representative'] = isset($data['personal_representative']) ? $data['personal_representative'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['caen'] = isset($data['caen']) ? $data['caen'] : null;
        $this->container['storage'] = isset($data['storage']) ? $data['storage'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email_alias'] = isset($data['email_alias']) ? $data['email_alias'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ((mb_strlen($this->container['address']) > 200)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['vat_id']) && (mb_strlen($this->container['vat_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'vat_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['vat_intra']) && (mb_strlen($this->container['vat_intra']) > 100)) {
            $invalidProperties[] = "invalid value for 'vat_intra', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['reg_com']) && (mb_strlen($this->container['reg_com']) > 60)) {
            $invalidProperties[] = "invalid value for 'reg_com', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 200)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['caen']) && (mb_strlen($this->container['caen']) > 5)) {
            $invalidProperties[] = "invalid value for 'caen', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 200)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Company., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Company., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return int
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param int $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets city
     *
     * @return int
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param int $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        if ((mb_strlen($address) > 200)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Company., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling Company., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets pays_vat
     *
     * @return bool
     */
    public function getPaysVat()
    {
        return $this->container['pays_vat'];
    }

    /**
     * Sets pays_vat
     *
     * @param bool $pays_vat pays_vat
     *
     * @return $this
     */
    public function setPaysVat($pays_vat)
    {
        $this->container['pays_vat'] = $pays_vat;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id vat_id
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        if (!is_null($vat_id) && (mb_strlen($vat_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $vat_id when calling Company., must be smaller than or equal to 100.');
        }

        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets vat_intra
     *
     * @return string
     */
    public function getVatIntra()
    {
        return $this->container['vat_intra'];
    }

    /**
     * Sets vat_intra
     *
     * @param string $vat_intra vat_intra
     *
     * @return $this
     */
    public function setVatIntra($vat_intra)
    {
        if (!is_null($vat_intra) && (mb_strlen($vat_intra) > 100)) {
            throw new \InvalidArgumentException('invalid length for $vat_intra when calling Company., must be smaller than or equal to 100.');
        }

        $this->container['vat_intra'] = $vat_intra;

        return $this;
    }

    /**
     * Gets vat_at_income
     *
     * @return bool
     */
    public function getVatAtIncome()
    {
        return $this->container['vat_at_income'];
    }

    /**
     * Sets vat_at_income
     *
     * @param bool $vat_at_income vat_at_income
     *
     * @return $this
     */
    public function setVatAtIncome($vat_at_income)
    {
        $this->container['vat_at_income'] = $vat_at_income;

        return $this;
    }

    /**
     * Gets reg_com
     *
     * @return string
     */
    public function getRegCom()
    {
        return $this->container['reg_com'];
    }

    /**
     * Sets reg_com
     *
     * @param string $reg_com reg_com
     *
     * @return $this
     */
    public function setRegCom($reg_com)
    {
        if (!is_null($reg_com) && (mb_strlen($reg_com) > 60)) {
            throw new \InvalidArgumentException('invalid length for $reg_com when calling Company., must be smaller than or equal to 60.');
        }

        $this->container['reg_com'] = $reg_com;

        return $this;
    }

    /**
     * Gets social_capital
     *
     * @return string
     */
    public function getSocialCapital()
    {
        return $this->container['social_capital'];
    }

    /**
     * Sets social_capital
     *
     * @param string $social_capital social_capital
     *
     * @return $this
     */
    public function setSocialCapital($social_capital)
    {
        $this->container['social_capital'] = $social_capital;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Company., must be smaller than or equal to 254.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (mb_strlen($website) > 200)) {
            throw new \InvalidArgumentException('invalid length for $website when calling Company., must be smaller than or equal to 200.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets enabled_modules
     *
     * @return string
     */
    public function getEnabledModules()
    {
        return $this->container['enabled_modules'];
    }

    /**
     * Sets enabled_modules
     *
     * @param string $enabled_modules enabled_modules
     *
     * @return $this
     */
    public function setEnabledModules($enabled_modules)
    {
        $this->container['enabled_modules'] = $enabled_modules;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return string[]
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param string[] $modules 
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }

    /**
     * Gets site_logo
     *
     * @return string
     */
    public function getSiteLogo()
    {
        return $this->container['site_logo'];
    }

    /**
     * Sets site_logo
     *
     * @param string $site_logo Imaginea trebuie sa fie exact 1024x1024 pixeli
     *
     * @return $this
     */
    public function setSiteLogo($site_logo)
    {
        $this->container['site_logo'] = $site_logo;

        return $this;
    }

    /**
     * Gets personal_representative
     *
     * @return string
     */
    public function getPersonalRepresentative()
    {
        return $this->container['personal_representative'];
    }

    /**
     * Sets personal_representative
     *
     * @param string $personal_representative Numele reprezentatului legal
     *
     * @return $this
     */
    public function setPersonalRepresentative($personal_representative)
    {
        $this->container['personal_representative'] = $personal_representative;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets caen
     *
     * @return string
     */
    public function getCaen()
    {
        return $this->container['caen'];
    }

    /**
     * Sets caen
     *
     * @param string $caen caen
     *
     * @return $this
     */
    public function setCaen($caen)
    {
        if (!is_null($caen) && (mb_strlen($caen) > 5)) {
            throw new \InvalidArgumentException('invalid length for $caen when calling Company., must be smaller than or equal to 5.');
        }

        $this->container['caen'] = $caen;

        return $this;
    }

    /**
     * Gets storage
     *
     * @return string
     */
    public function getStorage()
    {
        return $this->container['storage'];
    }

    /**
     * Sets storage
     *
     * @param string $storage storage
     *
     * @return $this
     */
    public function setStorage($storage)
    {
        $this->container['storage'] = $storage;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 200)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Company., must be smaller than or equal to 200.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email_alias
     *
     * @return string
     */
    public function getEmailAlias()
    {
        return $this->container['email_alias'];
    }

    /**
     * Sets email_alias
     *
     * @param string $email_alias email_alias
     *
     * @return $this
     */
    public function setEmailAlias($email_alias)
    {
        $this->container['email_alias'] = $email_alias;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


