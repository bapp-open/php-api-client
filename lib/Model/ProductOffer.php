<?php
/**
 * ProductOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductOffer Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'agent_vanzari' => 'string',
        'agent_fax' => 'string',
        'agent_phone1' => 'string',
        'agent_phone2' => 'string',
        'location' => 'string',
        'company_phones' => 'string',
        'location_detail' => 'string',
        'adaos' => 'int',
        'category' => 'int',
        'discount' => 'int',
        'partner' => 'int',
        'include_image' => 'bool',
        'include_stock' => 'bool',
        'vat' => 'bool',
        'emails' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'agent_vanzari' => null,
        'agent_fax' => null,
        'agent_phone1' => null,
        'agent_phone2' => null,
        'location' => null,
        'company_phones' => null,
        'location_detail' => null,
        'adaos' => null,
        'category' => null,
        'discount' => null,
        'partner' => null,
        'include_image' => null,
        'include_stock' => null,
        'vat' => null,
        'emails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_vanzari' => 'agent_vanzari',
        'agent_fax' => 'agent_fax',
        'agent_phone1' => 'agent_phone1',
        'agent_phone2' => 'agent_phone2',
        'location' => 'location',
        'company_phones' => 'company_phones',
        'location_detail' => 'location_detail',
        'adaos' => 'adaos',
        'category' => 'category',
        'discount' => 'discount',
        'partner' => 'partner',
        'include_image' => 'include_image',
        'include_stock' => 'include_stock',
        'vat' => 'vat',
        'emails' => 'emails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_vanzari' => 'setAgentVanzari',
        'agent_fax' => 'setAgentFax',
        'agent_phone1' => 'setAgentPhone1',
        'agent_phone2' => 'setAgentPhone2',
        'location' => 'setLocation',
        'company_phones' => 'setCompanyPhones',
        'location_detail' => 'setLocationDetail',
        'adaos' => 'setAdaos',
        'category' => 'setCategory',
        'discount' => 'setDiscount',
        'partner' => 'setPartner',
        'include_image' => 'setIncludeImage',
        'include_stock' => 'setIncludeStock',
        'vat' => 'setVat',
        'emails' => 'setEmails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_vanzari' => 'getAgentVanzari',
        'agent_fax' => 'getAgentFax',
        'agent_phone1' => 'getAgentPhone1',
        'agent_phone2' => 'getAgentPhone2',
        'location' => 'getLocation',
        'company_phones' => 'getCompanyPhones',
        'location_detail' => 'getLocationDetail',
        'adaos' => 'getAdaos',
        'category' => 'getCategory',
        'discount' => 'getDiscount',
        'partner' => 'getPartner',
        'include_image' => 'getIncludeImage',
        'include_stock' => 'getIncludeStock',
        'vat' => 'getVat',
        'emails' => 'getEmails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agent_vanzari'] = isset($data['agent_vanzari']) ? $data['agent_vanzari'] : null;
        $this->container['agent_fax'] = isset($data['agent_fax']) ? $data['agent_fax'] : null;
        $this->container['agent_phone1'] = isset($data['agent_phone1']) ? $data['agent_phone1'] : null;
        $this->container['agent_phone2'] = isset($data['agent_phone2']) ? $data['agent_phone2'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['company_phones'] = isset($data['company_phones']) ? $data['company_phones'] : null;
        $this->container['location_detail'] = isset($data['location_detail']) ? $data['location_detail'] : null;
        $this->container['adaos'] = isset($data['adaos']) ? $data['adaos'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['include_image'] = isset($data['include_image']) ? $data['include_image'] : false;
        $this->container['include_stock'] = isset($data['include_stock']) ? $data['include_stock'] : false;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : false;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['agent_vanzari']) && (mb_strlen($this->container['agent_vanzari']) < 1)) {
            $invalidProperties[] = "invalid value for 'agent_vanzari', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['agent_fax']) && (mb_strlen($this->container['agent_fax']) < 1)) {
            $invalidProperties[] = "invalid value for 'agent_fax', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['agent_phone1']) && (mb_strlen($this->container['agent_phone1']) < 1)) {
            $invalidProperties[] = "invalid value for 'agent_phone1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['agent_phone2']) && (mb_strlen($this->container['agent_phone2']) < 1)) {
            $invalidProperties[] = "invalid value for 'agent_phone2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['location']) && (mb_strlen($this->container['location']) < 1)) {
            $invalidProperties[] = "invalid value for 'location', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company_phones']) && (mb_strlen($this->container['company_phones']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_phones', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['location_detail']) && (mb_strlen($this->container['location_detail']) < 1)) {
            $invalidProperties[] = "invalid value for 'location_detail', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adaos']) && ($this->container['adaos'] < 0)) {
            $invalidProperties[] = "invalid value for 'adaos', must be bigger than or equal to 0.";
        }

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if (!is_null($this->container['discount']) && ($this->container['discount'] > 100)) {
            $invalidProperties[] = "invalid value for 'discount', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['discount']) && ($this->container['discount'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_vanzari
     *
     * @return string
     */
    public function getAgentVanzari()
    {
        return $this->container['agent_vanzari'];
    }

    /**
     * Sets agent_vanzari
     *
     * @param string $agent_vanzari agent_vanzari
     *
     * @return $this
     */
    public function setAgentVanzari($agent_vanzari)
    {

        if (!is_null($agent_vanzari) && (mb_strlen($agent_vanzari) < 1)) {
            throw new \InvalidArgumentException('invalid length for $agent_vanzari when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['agent_vanzari'] = $agent_vanzari;

        return $this;
    }

    /**
     * Gets agent_fax
     *
     * @return string
     */
    public function getAgentFax()
    {
        return $this->container['agent_fax'];
    }

    /**
     * Sets agent_fax
     *
     * @param string $agent_fax agent_fax
     *
     * @return $this
     */
    public function setAgentFax($agent_fax)
    {

        if (!is_null($agent_fax) && (mb_strlen($agent_fax) < 1)) {
            throw new \InvalidArgumentException('invalid length for $agent_fax when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['agent_fax'] = $agent_fax;

        return $this;
    }

    /**
     * Gets agent_phone1
     *
     * @return string
     */
    public function getAgentPhone1()
    {
        return $this->container['agent_phone1'];
    }

    /**
     * Sets agent_phone1
     *
     * @param string $agent_phone1 agent_phone1
     *
     * @return $this
     */
    public function setAgentPhone1($agent_phone1)
    {

        if (!is_null($agent_phone1) && (mb_strlen($agent_phone1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $agent_phone1 when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['agent_phone1'] = $agent_phone1;

        return $this;
    }

    /**
     * Gets agent_phone2
     *
     * @return string
     */
    public function getAgentPhone2()
    {
        return $this->container['agent_phone2'];
    }

    /**
     * Sets agent_phone2
     *
     * @param string $agent_phone2 agent_phone2
     *
     * @return $this
     */
    public function setAgentPhone2($agent_phone2)
    {

        if (!is_null($agent_phone2) && (mb_strlen($agent_phone2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $agent_phone2 when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['agent_phone2'] = $agent_phone2;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {

        if (!is_null($location) && (mb_strlen($location) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets company_phones
     *
     * @return string
     */
    public function getCompanyPhones()
    {
        return $this->container['company_phones'];
    }

    /**
     * Sets company_phones
     *
     * @param string $company_phones company_phones
     *
     * @return $this
     */
    public function setCompanyPhones($company_phones)
    {

        if (!is_null($company_phones) && (mb_strlen($company_phones) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_phones when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['company_phones'] = $company_phones;

        return $this;
    }

    /**
     * Gets location_detail
     *
     * @return string
     */
    public function getLocationDetail()
    {
        return $this->container['location_detail'];
    }

    /**
     * Sets location_detail
     *
     * @param string $location_detail location_detail
     *
     * @return $this
     */
    public function setLocationDetail($location_detail)
    {

        if (!is_null($location_detail) && (mb_strlen($location_detail) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location_detail when calling ProductOffer., must be bigger than or equal to 1.');
        }

        $this->container['location_detail'] = $location_detail;

        return $this;
    }

    /**
     * Gets adaos
     *
     * @return int
     */
    public function getAdaos()
    {
        return $this->container['adaos'];
    }

    /**
     * Sets adaos
     *
     * @param int $adaos adaos
     *
     * @return $this
     */
    public function setAdaos($adaos)
    {

        if (!is_null($adaos) && ($adaos < 0)) {
            throw new \InvalidArgumentException('invalid value for $adaos when calling ProductOffer., must be bigger than or equal to 0.');
        }

        $this->container['adaos'] = $adaos;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return int
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {

        if (!is_null($discount) && ($discount > 100)) {
            throw new \InvalidArgumentException('invalid value for $discount when calling ProductOffer., must be smaller than or equal to 100.');
        }
        if (!is_null($discount) && ($discount < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount when calling ProductOffer., must be bigger than or equal to 0.');
        }

        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets include_image
     *
     * @return bool
     */
    public function getIncludeImage()
    {
        return $this->container['include_image'];
    }

    /**
     * Sets include_image
     *
     * @param bool $include_image include_image
     *
     * @return $this
     */
    public function setIncludeImage($include_image)
    {
        $this->container['include_image'] = $include_image;

        return $this;
    }

    /**
     * Gets include_stock
     *
     * @return bool
     */
    public function getIncludeStock()
    {
        return $this->container['include_stock'];
    }

    /**
     * Sets include_stock
     *
     * @param bool $include_stock include_stock
     *
     * @return $this
     */
    public function setIncludeStock($include_stock)
    {
        $this->container['include_stock'] = $include_stock;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return bool
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param bool $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails 
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


