<?php
/**
 * EmploymentContractBonus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmploymentContractBonus Class Doc Comment
 *
 * @category Class
 * @description EmploymentContractBonus(id, company, contract, bonus_type, value, percent)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmploymentContractBonus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmploymentContractBonus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'contract' => 'int',
        'bonus_type' => 'string',
        'bonus_type_display' => 'string',
        'value' => 'string',
        'percent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'contract' => null,
        'bonus_type' => null,
        'bonus_type_display' => null,
        'value' => 'decimal',
        'percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contract' => 'contract',
        'bonus_type' => 'bonus_type',
        'bonus_type_display' => 'bonus_type_display',
        'value' => 'value',
        'percent' => 'percent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contract' => 'setContract',
        'bonus_type' => 'setBonusType',
        'bonus_type_display' => 'setBonusTypeDisplay',
        'value' => 'setValue',
        'percent' => 'setPercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contract' => 'getContract',
        'bonus_type' => 'getBonusType',
        'bonus_type_display' => 'getBonusTypeDisplay',
        'value' => 'getValue',
        'percent' => 'getPercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['bonus_type'] = isset($data['bonus_type']) ? $data['bonus_type'] : null;
        $this->container['bonus_type_display'] = isset($data['bonus_type_display']) ? $data['bonus_type_display'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['percent'] = isset($data['percent']) ? $data['percent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contract'] === null) {
            $invalidProperties[] = "'contract' can't be null";
        }
        if ($this->container['bonus_type'] === null) {
            $invalidProperties[] = "'bonus_type' can't be null";
        }
        if ((mb_strlen($this->container['bonus_type']) > 200)) {
            $invalidProperties[] = "invalid value for 'bonus_type', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['bonus_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'bonus_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return int
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param int $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets bonus_type
     *
     * @return string
     */
    public function getBonusType()
    {
        return $this->container['bonus_type'];
    }

    /**
     * Sets bonus_type
     *
     * @param string $bonus_type bonus_type
     *
     * @return $this
     */
    public function setBonusType($bonus_type)
    {
        if ((mb_strlen($bonus_type) > 200)) {
            throw new \InvalidArgumentException('invalid length for $bonus_type when calling EmploymentContractBonus., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($bonus_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bonus_type when calling EmploymentContractBonus., must be bigger than or equal to 1.');
        }

        $this->container['bonus_type'] = $bonus_type;

        return $this;
    }

    /**
     * Gets bonus_type_display
     *
     * @return string
     */
    public function getBonusTypeDisplay()
    {
        return $this->container['bonus_type_display'];
    }

    /**
     * Sets bonus_type_display
     *
     * @param string $bonus_type_display bonus_type_display
     *
     * @return $this
     */
    public function setBonusTypeDisplay($bonus_type_display)
    {
        $this->container['bonus_type_display'] = $bonus_type_display;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets percent
     *
     * @return bool
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     *
     * @param bool $percent percent
     *
     * @return $this
     */
    public function setPercent($percent)
    {
        $this->container['percent'] = $percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


