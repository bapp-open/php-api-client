<?php
/**
 * StockSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StockSettings Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StockSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StockSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allows_negative_quantity' => 'bool',
        'default_stock_for_billing' => 'int',
        'default_stock_for_reception_note' => 'int',
        'automatic_transfer' => 'bool',
        'stock_method' => 'string',
        'automatically_generate_and_finalise_reception_note' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allows_negative_quantity' => null,
        'default_stock_for_billing' => null,
        'default_stock_for_reception_note' => null,
        'automatic_transfer' => null,
        'stock_method' => null,
        'automatically_generate_and_finalise_reception_note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allows_negative_quantity' => 'allows_negative_quantity',
        'default_stock_for_billing' => 'default_stock_for_billing',
        'default_stock_for_reception_note' => 'default_stock_for_reception_note',
        'automatic_transfer' => 'automatic_transfer',
        'stock_method' => 'stock_method',
        'automatically_generate_and_finalise_reception_note' => 'automatically_generate_and_finalise_reception_note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allows_negative_quantity' => 'setAllowsNegativeQuantity',
        'default_stock_for_billing' => 'setDefaultStockForBilling',
        'default_stock_for_reception_note' => 'setDefaultStockForReceptionNote',
        'automatic_transfer' => 'setAutomaticTransfer',
        'stock_method' => 'setStockMethod',
        'automatically_generate_and_finalise_reception_note' => 'setAutomaticallyGenerateAndFinaliseReceptionNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allows_negative_quantity' => 'getAllowsNegativeQuantity',
        'default_stock_for_billing' => 'getDefaultStockForBilling',
        'default_stock_for_reception_note' => 'getDefaultStockForReceptionNote',
        'automatic_transfer' => 'getAutomaticTransfer',
        'stock_method' => 'getStockMethod',
        'automatically_generate_and_finalise_reception_note' => 'getAutomaticallyGenerateAndFinaliseReceptionNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STOCK_METHOD_CMP = 'cmp';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockMethodAllowableValues()
    {
        return [
            self::STOCK_METHOD_CMP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allows_negative_quantity'] = isset($data['allows_negative_quantity']) ? $data['allows_negative_quantity'] : false;
        $this->container['default_stock_for_billing'] = isset($data['default_stock_for_billing']) ? $data['default_stock_for_billing'] : null;
        $this->container['default_stock_for_reception_note'] = isset($data['default_stock_for_reception_note']) ? $data['default_stock_for_reception_note'] : null;
        $this->container['automatic_transfer'] = isset($data['automatic_transfer']) ? $data['automatic_transfer'] : false;
        $this->container['stock_method'] = isset($data['stock_method']) ? $data['stock_method'] : 'cmp';
        $this->container['automatically_generate_and_finalise_reception_note'] = isset($data['automatically_generate_and_finalise_reception_note']) ? $data['automatically_generate_and_finalise_reception_note'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStockMethodAllowableValues();
        if (!is_null($this->container['stock_method']) && !in_array($this->container['stock_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stock_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allows_negative_quantity
     *
     * @return bool
     */
    public function getAllowsNegativeQuantity()
    {
        return $this->container['allows_negative_quantity'];
    }

    /**
     * Sets allows_negative_quantity
     *
     * @param bool $allows_negative_quantity Permite cantitate negativă pe stoc
     *
     * @return $this
     */
    public function setAllowsNegativeQuantity($allows_negative_quantity)
    {
        $this->container['allows_negative_quantity'] = $allows_negative_quantity;

        return $this;
    }

    /**
     * Gets default_stock_for_billing
     *
     * @return int
     */
    public function getDefaultStockForBilling()
    {
        return $this->container['default_stock_for_billing'];
    }

    /**
     * Sets default_stock_for_billing
     *
     * @param int $default_stock_for_billing Gestiune implicită pentru facturare
     *
     * @return $this
     */
    public function setDefaultStockForBilling($default_stock_for_billing)
    {
        $this->container['default_stock_for_billing'] = $default_stock_for_billing;

        return $this;
    }

    /**
     * Gets default_stock_for_reception_note
     *
     * @return int
     */
    public function getDefaultStockForReceptionNote()
    {
        return $this->container['default_stock_for_reception_note'];
    }

    /**
     * Sets default_stock_for_reception_note
     *
     * @param int $default_stock_for_reception_note Gestiune implicită pentru nir-uri
     *
     * @return $this
     */
    public function setDefaultStockForReceptionNote($default_stock_for_reception_note)
    {
        $this->container['default_stock_for_reception_note'] = $default_stock_for_reception_note;

        return $this;
    }

    /**
     * Gets automatic_transfer
     *
     * @return bool
     */
    public function getAutomaticTransfer()
    {
        return $this->container['automatic_transfer'];
    }

    /**
     * Sets automatic_transfer
     *
     * @param bool $automatic_transfer Transfer automat între gestiunile din aceeași locație
     *
     * @return $this
     */
    public function setAutomaticTransfer($automatic_transfer)
    {
        $this->container['automatic_transfer'] = $automatic_transfer;

        return $this;
    }

    /**
     * Gets stock_method
     *
     * @return string
     */
    public function getStockMethod()
    {
        return $this->container['stock_method'];
    }

    /**
     * Sets stock_method
     *
     * @param string $stock_method Metodă descărcare gestiune
     *
     * @return $this
     */
    public function setStockMethod($stock_method)
    {
        $allowedValues = $this->getStockMethodAllowableValues();
        if (!is_null($stock_method) && !in_array($stock_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stock_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock_method'] = $stock_method;

        return $this;
    }

    /**
     * Gets automatically_generate_and_finalise_reception_note
     *
     * @return bool
     */
    public function getAutomaticallyGenerateAndFinaliseReceptionNote()
    {
        return $this->container['automatically_generate_and_finalise_reception_note'];
    }

    /**
     * Sets automatically_generate_and_finalise_reception_note
     *
     * @param bool $automatically_generate_and_finalise_reception_note Generează și finalizează automat nir-urile din facturile furnizor trimise de către furnizori care au conexiune
     *
     * @return $this
     */
    public function setAutomaticallyGenerateAndFinaliseReceptionNote($automatically_generate_and_finalise_reception_note)
    {
        $this->container['automatically_generate_and_finalise_reception_note'] = $automatically_generate_and_finalise_reception_note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


