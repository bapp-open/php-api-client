<?php
/**
 * CompanyProjectSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyProjectSettings Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyProjectSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyProjectSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_time_closure' => 'int',
        'task_page_size' => 'int',
        'task_paralel_time_tracking' => 'bool',
        'task_minimum_consumption' => 'bool',
        'task_minimum_time_consumption' => 'int',
        'task_minimum_product_consumption' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_time_closure' => null,
        'task_page_size' => null,
        'task_paralel_time_tracking' => null,
        'task_minimum_consumption' => null,
        'task_minimum_time_consumption' => null,
        'task_minimum_product_consumption' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_time_closure' => 'task_time_closure',
        'task_page_size' => 'task_page_size',
        'task_paralel_time_tracking' => 'task_paralel_time_tracking',
        'task_minimum_consumption' => 'task_minimum_consumption',
        'task_minimum_time_consumption' => 'task_minimum_time_consumption',
        'task_minimum_product_consumption' => 'task_minimum_product_consumption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_time_closure' => 'setTaskTimeClosure',
        'task_page_size' => 'setTaskPageSize',
        'task_paralel_time_tracking' => 'setTaskParalelTimeTracking',
        'task_minimum_consumption' => 'setTaskMinimumConsumption',
        'task_minimum_time_consumption' => 'setTaskMinimumTimeConsumption',
        'task_minimum_product_consumption' => 'setTaskMinimumProductConsumption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_time_closure' => 'getTaskTimeClosure',
        'task_page_size' => 'getTaskPageSize',
        'task_paralel_time_tracking' => 'getTaskParalelTimeTracking',
        'task_minimum_consumption' => 'getTaskMinimumConsumption',
        'task_minimum_time_consumption' => 'getTaskMinimumTimeConsumption',
        'task_minimum_product_consumption' => 'getTaskMinimumProductConsumption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_time_closure'] = isset($data['task_time_closure']) ? $data['task_time_closure'] : null;
        $this->container['task_page_size'] = isset($data['task_page_size']) ? $data['task_page_size'] : null;
        $this->container['task_paralel_time_tracking'] = isset($data['task_paralel_time_tracking']) ? $data['task_paralel_time_tracking'] : false;
        $this->container['task_minimum_consumption'] = isset($data['task_minimum_consumption']) ? $data['task_minimum_consumption'] : false;
        $this->container['task_minimum_time_consumption'] = isset($data['task_minimum_time_consumption']) ? $data['task_minimum_time_consumption'] : null;
        $this->container['task_minimum_product_consumption'] = isset($data['task_minimum_product_consumption']) ? $data['task_minimum_product_consumption'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_time_closure
     *
     * @return int
     */
    public function getTaskTimeClosure()
    {
        return $this->container['task_time_closure'];
    }

    /**
     * Sets task_time_closure
     *
     * @param int $task_time_closure Time until a task can be closed
     *
     * @return $this
     */
    public function setTaskTimeClosure($task_time_closure)
    {
        $this->container['task_time_closure'] = $task_time_closure;

        return $this;
    }

    /**
     * Gets task_page_size
     *
     * @return int
     */
    public function getTaskPageSize()
    {
        return $this->container['task_page_size'];
    }

    /**
     * Sets task_page_size
     *
     * @param int $task_page_size Number of tasks on a page
     *
     * @return $this
     */
    public function setTaskPageSize($task_page_size)
    {
        $this->container['task_page_size'] = $task_page_size;

        return $this;
    }

    /**
     * Gets task_paralel_time_tracking
     *
     * @return bool
     */
    public function getTaskParalelTimeTracking()
    {
        return $this->container['task_paralel_time_tracking'];
    }

    /**
     * Sets task_paralel_time_tracking
     *
     * @param bool $task_paralel_time_tracking Track time for multiple tasks at once
     *
     * @return $this
     */
    public function setTaskParalelTimeTracking($task_paralel_time_tracking)
    {
        $this->container['task_paralel_time_tracking'] = $task_paralel_time_tracking;

        return $this;
    }

    /**
     * Gets task_minimum_consumption
     *
     * @return bool
     */
    public function getTaskMinimumConsumption()
    {
        return $this->container['task_minimum_consumption'];
    }

    /**
     * Sets task_minimum_consumption
     *
     * @param bool $task_minimum_consumption Allows the start of depends on tasks after a minimum of consumption
     *
     * @return $this
     */
    public function setTaskMinimumConsumption($task_minimum_consumption)
    {
        $this->container['task_minimum_consumption'] = $task_minimum_consumption;

        return $this;
    }

    /**
     * Gets task_minimum_time_consumption
     *
     * @return int
     */
    public function getTaskMinimumTimeConsumption()
    {
        return $this->container['task_minimum_time_consumption'];
    }

    /**
     * Sets task_minimum_time_consumption
     *
     * @param int $task_minimum_time_consumption Time until a depends on task will be shown, will propagate only if task_minimum_consumption is True
     *
     * @return $this
     */
    public function setTaskMinimumTimeConsumption($task_minimum_time_consumption)
    {
        $this->container['task_minimum_time_consumption'] = $task_minimum_time_consumption;

        return $this;
    }

    /**
     * Gets task_minimum_product_consumption
     *
     * @return int
     */
    public function getTaskMinimumProductConsumption()
    {
        return $this->container['task_minimum_product_consumption'];
    }

    /**
     * Sets task_minimum_product_consumption
     *
     * @param int $task_minimum_product_consumption Products until a depends on task will be shown, will propagate only if task_minimum_consumption is True
     *
     * @return $this
     */
    public function setTaskMinimumProductConsumption($task_minimum_product_consumption)
    {
        $this->container['task_minimum_product_consumption'] = $task_minimum_product_consumption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


