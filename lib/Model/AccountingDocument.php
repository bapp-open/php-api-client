<?php
/**
 * AccountingDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountingDocument Class Doc Comment
 *
 * @category Class
 * @description Document(id, created_at, modified_at, company, created_by, modified_by, partner, source, hash, original, original_mime_type, image, preview, status, document_type, document_number, document_date, document_due_date, value, currency, extra_data, tag, content_type, object_id)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountingDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountingDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'preview_image' => 'string',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime',
        'source' => 'int',
        'hash' => 'string',
        'original' => 'string',
        'original_mime_type' => 'string',
        'image' => 'string',
        'preview' => 'string',
        'status' => 'int',
        'document_type' => 'int',
        'document_number' => 'string',
        'document_date' => '\DateTime',
        'document_due_date' => '\DateTime',
        'value' => 'string',
        'extra_data' => 'object',
        'tag' => 'int',
        'company' => 'int',
        'created_by' => 'string',
        'modified_by' => 'string',
        'partner' => 'int',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'preview_image' => null,
        'created_at' => 'date-time',
        'modified_at' => 'date-time',
        'source' => null,
        'hash' => null,
        'original' => 'uri',
        'original_mime_type' => null,
        'image' => 'uri',
        'preview' => 'uri',
        'status' => null,
        'document_type' => null,
        'document_number' => null,
        'document_date' => 'date',
        'document_due_date' => 'date',
        'value' => 'decimal',
        'extra_data' => null,
        'tag' => null,
        'company' => null,
        'created_by' => 'uuid',
        'modified_by' => 'uuid',
        'partner' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'preview_image' => 'preview_image',
        'created_at' => 'created_at',
        'modified_at' => 'modified_at',
        'source' => 'source',
        'hash' => 'hash',
        'original' => 'original',
        'original_mime_type' => 'original_mime_type',
        'image' => 'image',
        'preview' => 'preview',
        'status' => 'status',
        'document_type' => 'document_type',
        'document_number' => 'document_number',
        'document_date' => 'document_date',
        'document_due_date' => 'document_due_date',
        'value' => 'value',
        'extra_data' => 'extra_data',
        'tag' => 'tag',
        'company' => 'company',
        'created_by' => 'created_by',
        'modified_by' => 'modified_by',
        'partner' => 'partner',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'preview_image' => 'setPreviewImage',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'source' => 'setSource',
        'hash' => 'setHash',
        'original' => 'setOriginal',
        'original_mime_type' => 'setOriginalMimeType',
        'image' => 'setImage',
        'preview' => 'setPreview',
        'status' => 'setStatus',
        'document_type' => 'setDocumentType',
        'document_number' => 'setDocumentNumber',
        'document_date' => 'setDocumentDate',
        'document_due_date' => 'setDocumentDueDate',
        'value' => 'setValue',
        'extra_data' => 'setExtraData',
        'tag' => 'setTag',
        'company' => 'setCompany',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'partner' => 'setPartner',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'preview_image' => 'getPreviewImage',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'source' => 'getSource',
        'hash' => 'getHash',
        'original' => 'getOriginal',
        'original_mime_type' => 'getOriginalMimeType',
        'image' => 'getImage',
        'preview' => 'getPreview',
        'status' => 'getStatus',
        'document_type' => 'getDocumentType',
        'document_number' => 'getDocumentNumber',
        'document_date' => 'getDocumentDate',
        'document_due_date' => 'getDocumentDueDate',
        'value' => 'getValue',
        'extra_data' => 'getExtraData',
        'tag' => 'getTag',
        'company' => 'getCompany',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'partner' => 'getPartner',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['preview_image'] = isset($data['preview_image']) ? $data['preview_image'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['original'] = isset($data['original']) ? $data['original'] : null;
        $this->container['original_mime_type'] = isset($data['original_mime_type']) ? $data['original_mime_type'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['preview'] = isset($data['preview']) ? $data['preview'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['document_due_date'] = isset($data['document_due_date']) ? $data['document_due_date'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['extra_data'] = isset($data['extra_data']) ? $data['extra_data'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['modified_by'] = isset($data['modified_by']) ? $data['modified_by'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hash']) && (mb_strlen($this->container['hash']) < 1)) {
            $invalidProperties[] = "invalid value for 'hash', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['original_mime_type']) && (mb_strlen($this->container['original_mime_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'original_mime_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['document_number']) && (mb_strlen($this->container['document_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'document_number', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets preview_image
     *
     * @return string
     */
    public function getPreviewImage()
    {
        return $this->container['preview_image'];
    }

    /**
     * Sets preview_image
     *
     * @param string $preview_image preview_image
     *
     * @return $this
     */
    public function setPreviewImage($preview_image)
    {
        $this->container['preview_image'] = $preview_image;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which this record was added
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime $modified_at Date and time at which this record was modified
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets source
     *
     * @return int
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param int $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return $this
     */
    public function setHash($hash)
    {

        if (!is_null($hash) && (mb_strlen($hash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $hash when calling AccountingDocument., must be bigger than or equal to 1.');
        }

        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets original
     *
     * @return string
     */
    public function getOriginal()
    {
        return $this->container['original'];
    }

    /**
     * Sets original
     *
     * @param string $original original
     *
     * @return $this
     */
    public function setOriginal($original)
    {
        $this->container['original'] = $original;

        return $this;
    }

    /**
     * Gets original_mime_type
     *
     * @return string
     */
    public function getOriginalMimeType()
    {
        return $this->container['original_mime_type'];
    }

    /**
     * Sets original_mime_type
     *
     * @param string $original_mime_type original_mime_type
     *
     * @return $this
     */
    public function setOriginalMimeType($original_mime_type)
    {

        if (!is_null($original_mime_type) && (mb_strlen($original_mime_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $original_mime_type when calling AccountingDocument., must be bigger than or equal to 1.');
        }

        $this->container['original_mime_type'] = $original_mime_type;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string $preview preview
     *
     * @return $this
     */
    public function setPreview($preview)
    {
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return int
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param int $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number document_number
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        if (!is_null($document_number) && (mb_strlen($document_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $document_number when calling AccountingDocument., must be smaller than or equal to 100.');
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date document_date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets document_due_date
     *
     * @return \DateTime
     */
    public function getDocumentDueDate()
    {
        return $this->container['document_due_date'];
    }

    /**
     * Sets document_due_date
     *
     * @param \DateTime $document_due_date document_due_date
     *
     * @return $this
     */
    public function setDocumentDueDate($document_due_date)
    {
        $this->container['document_due_date'] = $document_due_date;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return object
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param object $extra_data extra_data
     *
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return int
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param int $tag tag
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets company
     *
     * @return int
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param int $company Firma care deține această înregistrare.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by User id that created this record
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string $modified_by Last user id that modified this record
     *
     * @return $this
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


