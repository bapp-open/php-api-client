<?php
/**
 * StockMovementModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StockMovementModel Class Doc Comment
 *
 * @category Class
 * @description StockMovement(id, created_at, modified_at, company, stock_reference, stock, product, document_serial, document_number, document_type, content_type, object_id, quantity, price, movement_stock, weighted_average_cost, initial, ingress_price)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StockMovementModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StockMovementModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'stock' => 'int',
        'stock_reference' => 'int',
        'product' => 'int',
        'document_type' => 'int',
        'document_serial' => 'string',
        'document_number' => 'string',
        'formatted_number' => 'string',
        'quantity' => 'string',
        'movement_stock' => 'string',
        'weighted_average_cost' => 'string',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'stock' => null,
        'stock_reference' => null,
        'product' => null,
        'document_type' => null,
        'document_serial' => null,
        'document_number' => null,
        'formatted_number' => null,
        'quantity' => 'decimal',
        'movement_stock' => 'decimal',
        'weighted_average_cost' => 'decimal',
        'created_at' => 'date-time',
        'modified_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'stock' => 'stock',
        'stock_reference' => 'stock_reference',
        'product' => 'product',
        'document_type' => 'document_type',
        'document_serial' => 'document_serial',
        'document_number' => 'document_number',
        'formatted_number' => 'formatted_number',
        'quantity' => 'quantity',
        'movement_stock' => 'movement_stock',
        'weighted_average_cost' => 'weighted_average_cost',
        'created_at' => 'created_at',
        'modified_at' => 'modified_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'stock' => 'setStock',
        'stock_reference' => 'setStockReference',
        'product' => 'setProduct',
        'document_type' => 'setDocumentType',
        'document_serial' => 'setDocumentSerial',
        'document_number' => 'setDocumentNumber',
        'formatted_number' => 'setFormattedNumber',
        'quantity' => 'setQuantity',
        'movement_stock' => 'setMovementStock',
        'weighted_average_cost' => 'setWeightedAverageCost',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'stock' => 'getStock',
        'stock_reference' => 'getStockReference',
        'product' => 'getProduct',
        'document_type' => 'getDocumentType',
        'document_serial' => 'getDocumentSerial',
        'document_number' => 'getDocumentNumber',
        'formatted_number' => 'getFormattedNumber',
        'quantity' => 'getQuantity',
        'movement_stock' => 'getMovementStock',
        'weighted_average_cost' => 'getWeightedAverageCost',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['stock_reference'] = isset($data['stock_reference']) ? $data['stock_reference'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_serial'] = isset($data['document_serial']) ? $data['document_serial'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['formatted_number'] = isset($data['formatted_number']) ? $data['formatted_number'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['movement_stock'] = isset($data['movement_stock']) ? $data['movement_stock'] : null;
        $this->container['weighted_average_cost'] = isset($data['weighted_average_cost']) ? $data['weighted_average_cost'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stock'] === null) {
            $invalidProperties[] = "'stock' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (!is_null($this->container['document_serial']) && (mb_strlen($this->container['document_serial']) > 20)) {
            $invalidProperties[] = "invalid value for 'document_serial', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['document_number']) && (mb_strlen($this->container['document_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'document_number', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int $stock Stocul pe care se fac operaÈ›ii
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets stock_reference
     *
     * @return int
     */
    public function getStockReference()
    {
        return $this->container['stock_reference'];
    }

    /**
     * Sets stock_reference
     *
     * @param int $stock_reference Stoc referinÈ›Äƒ
     *
     * @return $this
     */
    public function setStockReference($stock_reference)
    {
        $this->container['stock_reference'] = $stock_reference;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return int
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param int $document_type Tip document legÄƒturÄƒ
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_serial
     *
     * @return string
     */
    public function getDocumentSerial()
    {
        return $this->container['document_serial'];
    }

    /**
     * Sets document_serial
     *
     * @param string $document_serial Serie document legÄƒturÄƒ
     *
     * @return $this
     */
    public function setDocumentSerial($document_serial)
    {
        if (!is_null($document_serial) && (mb_strlen($document_serial) > 20)) {
            throw new \InvalidArgumentException('invalid length for $document_serial when calling StockMovementModel., must be smaller than or equal to 20.');
        }

        $this->container['document_serial'] = $document_serial;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number NumÄƒr document legÄƒturÄƒ
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        if (!is_null($document_number) && (mb_strlen($document_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $document_number when calling StockMovementModel., must be smaller than or equal to 20.');
        }

        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets formatted_number
     *
     * @return string
     */
    public function getFormattedNumber()
    {
        return $this->container['formatted_number'];
    }

    /**
     * Sets formatted_number
     *
     * @param string $formatted_number formatted_number
     *
     * @return $this
     */
    public function setFormattedNumber($formatted_number)
    {
        $this->container['formatted_number'] = $formatted_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets movement_stock
     *
     * @return string
     */
    public function getMovementStock()
    {
        return $this->container['movement_stock'];
    }

    /**
     * Sets movement_stock
     *
     * @param string $movement_stock Cantitatea stocului sursÄƒ la momentul creÄƒrii miÈ™cÄƒrii de stoc
     *
     * @return $this
     */
    public function setMovementStock($movement_stock)
    {
        $this->container['movement_stock'] = $movement_stock;

        return $this;
    }

    /**
     * Gets weighted_average_cost
     *
     * @return string
     */
    public function getWeightedAverageCost()
    {
        return $this->container['weighted_average_cost'];
    }

    /**
     * Sets weighted_average_cost
     *
     * @param string $weighted_average_cost weighted_average_cost
     *
     * @return $this
     */
    public function setWeightedAverageCost($weighted_average_cost)
    {
        $this->container['weighted_average_cost'] = $weighted_average_cost;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which this record was added
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime $modified_at Date and time at which this record was modified
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


