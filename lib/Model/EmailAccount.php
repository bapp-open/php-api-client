<?php
/**
 * EmailAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmailAccount Class Doc Comment
 *
 * @category Class
 * @description EmailAccount(id, company, host, port, username, password, email_from, outbound, inbound, protocol, smtp_validated, imap_validated, default, processed_action, smtp_checking, imap_checking)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'host' => 'string',
        'port' => 'int',
        'username' => 'string',
        'password' => 'string',
        'email_from' => 'string',
        'outbound' => 'bool',
        'inbound' => 'bool',
        'protocol' => 'string',
        'default' => 'bool',
        'actions' => 'int[]',
        'processed_action' => 'string',
        'smtp_validated' => 'bool',
        'imap_validated' => 'bool',
        'smtp_checking' => 'bool',
        'imap_checking' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'host' => null,
        'port' => null,
        'username' => null,
        'password' => null,
        'email_from' => null,
        'outbound' => null,
        'inbound' => null,
        'protocol' => null,
        'default' => null,
        'actions' => null,
        'processed_action' => null,
        'smtp_validated' => null,
        'imap_validated' => null,
        'smtp_checking' => null,
        'imap_checking' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'host' => 'host',
        'port' => 'port',
        'username' => 'username',
        'password' => 'password',
        'email_from' => 'email_from',
        'outbound' => 'outbound',
        'inbound' => 'inbound',
        'protocol' => 'protocol',
        'default' => 'default',
        'actions' => 'actions',
        'processed_action' => 'processed_action',
        'smtp_validated' => 'smtp_validated',
        'imap_validated' => 'imap_validated',
        'smtp_checking' => 'smtp_checking',
        'imap_checking' => 'imap_checking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'host' => 'setHost',
        'port' => 'setPort',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'email_from' => 'setEmailFrom',
        'outbound' => 'setOutbound',
        'inbound' => 'setInbound',
        'protocol' => 'setProtocol',
        'default' => 'setDefault',
        'actions' => 'setActions',
        'processed_action' => 'setProcessedAction',
        'smtp_validated' => 'setSmtpValidated',
        'imap_validated' => 'setImapValidated',
        'smtp_checking' => 'setSmtpChecking',
        'imap_checking' => 'setImapChecking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'host' => 'getHost',
        'port' => 'getPort',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'email_from' => 'getEmailFrom',
        'outbound' => 'getOutbound',
        'inbound' => 'getInbound',
        'protocol' => 'getProtocol',
        'default' => 'getDefault',
        'actions' => 'getActions',
        'processed_action' => 'getProcessedAction',
        'smtp_validated' => 'getSmtpValidated',
        'imap_validated' => 'getImapValidated',
        'smtp_checking' => 'getSmtpChecking',
        'imap_checking' => 'getImapChecking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROTOCOL_PLAIN = 'plain';
    const PROTOCOL_SSL = 'ssl';
    const PROTOCOL_TLS = 'tls';
    const PROCESSED_ACTION_MARK_READ = 'mark_read';
    const PROCESSED_ACTION_DELETE = 'delete';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_PLAIN,
            self::PROTOCOL_SSL,
            self::PROTOCOL_TLS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessedActionAllowableValues()
    {
        return [
            self::PROCESSED_ACTION_MARK_READ,
            self::PROCESSED_ACTION_DELETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['port'] = isset($data['port']) ? $data['port'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['email_from'] = isset($data['email_from']) ? $data['email_from'] : null;
        $this->container['outbound'] = isset($data['outbound']) ? $data['outbound'] : null;
        $this->container['inbound'] = isset($data['inbound']) ? $data['inbound'] : null;
        $this->container['protocol'] = isset($data['protocol']) ? $data['protocol'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['processed_action'] = isset($data['processed_action']) ? $data['processed_action'] : null;
        $this->container['smtp_validated'] = isset($data['smtp_validated']) ? $data['smtp_validated'] : null;
        $this->container['imap_validated'] = isset($data['imap_validated']) ? $data['imap_validated'] : null;
        $this->container['smtp_checking'] = isset($data['smtp_checking']) ? $data['smtp_checking'] : null;
        $this->container['imap_checking'] = isset($data['imap_checking']) ? $data['imap_checking'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['host'] === null) {
            $invalidProperties[] = "'host' can't be null";
        }
        if ((mb_strlen($this->container['host']) > 256)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['host']) < 1)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 32767)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) > 200)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 200)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['email_from']) && (mb_strlen($this->container['email_from']) > 200)) {
            $invalidProperties[] = "invalid value for 'email_from', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProcessedActionAllowableValues();
        if (!is_null($this->container['processed_action']) && !in_array($this->container['processed_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'processed_action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string $host host
     *
     * @return $this
     */
    public function setHost($host)
    {
        if ((mb_strlen($host) > 256)) {
            throw new \InvalidArgumentException('invalid length for $host when calling EmailAccount., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($host) < 1)) {
            throw new \InvalidArgumentException('invalid length for $host when calling EmailAccount., must be bigger than or equal to 1.');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int $port port
     *
     * @return $this
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 32767)) {
            throw new \InvalidArgumentException('invalid value for $port when calling EmailAccount., must be smaller than or equal to 32767.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling EmailAccount., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        if ((mb_strlen($username) > 200)) {
            throw new \InvalidArgumentException('invalid length for $username when calling EmailAccount., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling EmailAccount., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        if ((mb_strlen($password) > 200)) {
            throw new \InvalidArgumentException('invalid length for $password when calling EmailAccount., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling EmailAccount., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets email_from
     *
     * @return string
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string $email_from email_from
     *
     * @return $this
     */
    public function setEmailFrom($email_from)
    {
        if (!is_null($email_from) && (mb_strlen($email_from) > 200)) {
            throw new \InvalidArgumentException('invalid length for $email_from when calling EmailAccount., must be smaller than or equal to 200.');
        }

        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets outbound
     *
     * @return bool
     */
    public function getOutbound()
    {
        return $this->container['outbound'];
    }

    /**
     * Sets outbound
     *
     * @param bool $outbound outbound
     *
     * @return $this
     */
    public function setOutbound($outbound)
    {
        $this->container['outbound'] = $outbound;

        return $this;
    }

    /**
     * Gets inbound
     *
     * @return bool
     */
    public function getInbound()
    {
        return $this->container['inbound'];
    }

    /**
     * Sets inbound
     *
     * @param bool $inbound inbound
     *
     * @return $this
     */
    public function setInbound($inbound)
    {
        $this->container['inbound'] = $inbound;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol protocol
     *
     * @return $this
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return int[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param int[] $actions actions
     *
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets processed_action
     *
     * @return string
     */
    public function getProcessedAction()
    {
        return $this->container['processed_action'];
    }

    /**
     * Sets processed_action
     *
     * @param string $processed_action processed_action
     *
     * @return $this
     */
    public function setProcessedAction($processed_action)
    {
        $allowedValues = $this->getProcessedActionAllowableValues();
        if (!is_null($processed_action) && !in_array($processed_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'processed_action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processed_action'] = $processed_action;

        return $this;
    }

    /**
     * Gets smtp_validated
     *
     * @return bool
     */
    public function getSmtpValidated()
    {
        return $this->container['smtp_validated'];
    }

    /**
     * Sets smtp_validated
     *
     * @param bool $smtp_validated smtp_validated
     *
     * @return $this
     */
    public function setSmtpValidated($smtp_validated)
    {
        $this->container['smtp_validated'] = $smtp_validated;

        return $this;
    }

    /**
     * Gets imap_validated
     *
     * @return bool
     */
    public function getImapValidated()
    {
        return $this->container['imap_validated'];
    }

    /**
     * Sets imap_validated
     *
     * @param bool $imap_validated imap_validated
     *
     * @return $this
     */
    public function setImapValidated($imap_validated)
    {
        $this->container['imap_validated'] = $imap_validated;

        return $this;
    }

    /**
     * Gets smtp_checking
     *
     * @return bool
     */
    public function getSmtpChecking()
    {
        return $this->container['smtp_checking'];
    }

    /**
     * Sets smtp_checking
     *
     * @param bool $smtp_checking smtp_checking
     *
     * @return $this
     */
    public function setSmtpChecking($smtp_checking)
    {
        $this->container['smtp_checking'] = $smtp_checking;

        return $this;
    }

    /**
     * Gets imap_checking
     *
     * @return bool
     */
    public function getImapChecking()
    {
        return $this->container['imap_checking'];
    }

    /**
     * Sets imap_checking
     *
     * @param bool $imap_checking imap_checking
     *
     * @return $this
     */
    public function setImapChecking($imap_checking)
    {
        $this->container['imap_checking'] = $imap_checking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


