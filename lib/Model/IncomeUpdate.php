<?php
/**
 * IncomeUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IncomeUpdate Class Doc Comment
 *
 * @category Class
 * @description Income(id, snapshot, company, user, partner, currency, series, type, status, date, due_date, observations, identifier, value, remaining, invoice, former_income_id, extra, exchange_rate)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IncomeUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IncomeUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner' => 'int',
        'currency' => 'string',
        'type' => 'int',
        'status' => 'int',
        'date' => '\DateTime',
        'due_date' => '\DateTime',
        'observations' => 'string',
        'identifier' => 'string',
        'value' => 'string',
        'remaining' => 'string',
        'series' => 'int',
        'extra' => 'object',
        'former_income_id' => 'int',
        'formatted_number' => 'string',
        'exchange_rate' => 'string',
        'can_be_deleted' => 'string',
        'invoices_ids' => 'int[]',
        'selected_invoices' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'partner' => null,
        'currency' => null,
        'type' => null,
        'status' => null,
        'date' => 'date',
        'due_date' => 'date',
        'observations' => null,
        'identifier' => null,
        'value' => 'decimal',
        'remaining' => 'decimal',
        'series' => null,
        'extra' => null,
        'former_income_id' => null,
        'formatted_number' => null,
        'exchange_rate' => 'decimal',
        'can_be_deleted' => null,
        'invoices_ids' => null,
        'selected_invoices' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner' => 'partner',
        'currency' => 'currency',
        'type' => 'type',
        'status' => 'status',
        'date' => 'date',
        'due_date' => 'due_date',
        'observations' => 'observations',
        'identifier' => 'identifier',
        'value' => 'value',
        'remaining' => 'remaining',
        'series' => 'series',
        'extra' => 'extra',
        'former_income_id' => 'former_income_id',
        'formatted_number' => 'formatted_number',
        'exchange_rate' => 'exchange_rate',
        'can_be_deleted' => 'can_be_deleted',
        'invoices_ids' => 'invoices_ids',
        'selected_invoices' => 'selected_invoices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner' => 'setPartner',
        'currency' => 'setCurrency',
        'type' => 'setType',
        'status' => 'setStatus',
        'date' => 'setDate',
        'due_date' => 'setDueDate',
        'observations' => 'setObservations',
        'identifier' => 'setIdentifier',
        'value' => 'setValue',
        'remaining' => 'setRemaining',
        'series' => 'setSeries',
        'extra' => 'setExtra',
        'former_income_id' => 'setFormerIncomeId',
        'formatted_number' => 'setFormattedNumber',
        'exchange_rate' => 'setExchangeRate',
        'can_be_deleted' => 'setCanBeDeleted',
        'invoices_ids' => 'setInvoicesIds',
        'selected_invoices' => 'setSelectedInvoices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner' => 'getPartner',
        'currency' => 'getCurrency',
        'type' => 'getType',
        'status' => 'getStatus',
        'date' => 'getDate',
        'due_date' => 'getDueDate',
        'observations' => 'getObservations',
        'identifier' => 'getIdentifier',
        'value' => 'getValue',
        'remaining' => 'getRemaining',
        'series' => 'getSeries',
        'extra' => 'getExtra',
        'former_income_id' => 'getFormerIncomeId',
        'formatted_number' => 'getFormattedNumber',
        'exchange_rate' => 'getExchangeRate',
        'can_be_deleted' => 'getCanBeDeleted',
        'invoices_ids' => 'getInvoicesIds',
        'selected_invoices' => 'getSelectedInvoices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['observations'] = isset($data['observations']) ? $data['observations'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['remaining'] = isset($data['remaining']) ? $data['remaining'] : null;
        $this->container['series'] = isset($data['series']) ? $data['series'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['former_income_id'] = isset($data['former_income_id']) ? $data['former_income_id'] : null;
        $this->container['formatted_number'] = isset($data['formatted_number']) ? $data['formatted_number'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['can_be_deleted'] = isset($data['can_be_deleted']) ? $data['can_be_deleted'] : null;
        $this->container['invoices_ids'] = isset($data['invoices_ids']) ? $data['invoices_ids'] : null;
        $this->container['selected_invoices'] = isset($data['selected_invoices']) ? $data['selected_invoices'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partner'] === null) {
            $invalidProperties[] = "'partner' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) > 200)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if (!is_null($this->container['former_income_id']) && ($this->container['former_income_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'former_income_id', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['former_income_id']) && ($this->container['former_income_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'former_income_id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets observations
     *
     * @return string
     */
    public function getObservations()
    {
        return $this->container['observations'];
    }

    /**
     * Sets observations
     *
     * @param string $observations observations
     *
     * @return $this
     */
    public function setObservations($observations)
    {
        $this->container['observations'] = $observations;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        if (!is_null($identifier) && (mb_strlen($identifier) > 200)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling IncomeUpdate., must be smaller than or equal to 200.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets remaining
     *
     * @return string
     */
    public function getRemaining()
    {
        return $this->container['remaining'];
    }

    /**
     * Sets remaining
     *
     * @param string $remaining remaining
     *
     * @return $this
     */
    public function setRemaining($remaining)
    {
        $this->container['remaining'] = $remaining;

        return $this;
    }

    /**
     * Gets series
     *
     * @return int
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param int $series series
     *
     * @return $this
     */
    public function setSeries($series)
    {
        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return object
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param object $extra This field is for knowing from what was the income created.
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets former_income_id
     *
     * @return int
     */
    public function getFormerIncomeId()
    {
        return $this->container['former_income_id'];
    }

    /**
     * Sets former_income_id
     *
     * @param int $former_income_id former_income_id
     *
     * @return $this
     */
    public function setFormerIncomeId($former_income_id)
    {

        if (!is_null($former_income_id) && ($former_income_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $former_income_id when calling IncomeUpdate., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($former_income_id) && ($former_income_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $former_income_id when calling IncomeUpdate., must be bigger than or equal to 0.');
        }

        $this->container['former_income_id'] = $former_income_id;

        return $this;
    }

    /**
     * Gets formatted_number
     *
     * @return string
     */
    public function getFormattedNumber()
    {
        return $this->container['formatted_number'];
    }

    /**
     * Sets formatted_number
     *
     * @param string $formatted_number formatted_number
     *
     * @return $this
     */
    public function setFormattedNumber($formatted_number)
    {
        $this->container['formatted_number'] = $formatted_number;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return string
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param string $exchange_rate exchange_rate
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets can_be_deleted
     *
     * @return string
     */
    public function getCanBeDeleted()
    {
        return $this->container['can_be_deleted'];
    }

    /**
     * Sets can_be_deleted
     *
     * @param string $can_be_deleted can_be_deleted
     *
     * @return $this
     */
    public function setCanBeDeleted($can_be_deleted)
    {
        $this->container['can_be_deleted'] = $can_be_deleted;

        return $this;
    }

    /**
     * Gets invoices_ids
     *
     * @return int[]
     */
    public function getInvoicesIds()
    {
        return $this->container['invoices_ids'];
    }

    /**
     * Sets invoices_ids
     *
     * @param int[] $invoices_ids 
     *
     * @return $this
     */
    public function setInvoicesIds($invoices_ids)
    {
        $this->container['invoices_ids'] = $invoices_ids;

        return $this;
    }

    /**
     * Gets selected_invoices
     *
     * @return int[]
     */
    public function getSelectedInvoices()
    {
        return $this->container['selected_invoices'];
    }

    /**
     * Sets selected_invoices
     *
     * @param int[] $selected_invoices selected_invoices
     *
     * @return $this
     */
    public function setSelectedInvoices($selected_invoices)
    {
        $this->container['selected_invoices'] = $selected_invoices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


