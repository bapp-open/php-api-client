<?php
/**
 * SupplierItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SupplierItemModel Class Doc Comment
 *
 * @category Class
 * @description SupplierInvoiceItem(id, name, unit, description, quantity, tax, price, price_currency, subtotal, subtotal_currency, tax_value, tax_value_currency, total, total_currency, is_discount, discount, discounted_value, discounted_value_currency, discounted_tax_value, discounted_tax_value_currency, discount_subtotal, discount_subtotal_currency, discount_tax_value, discount_tax_value_currency, undiscounted_price, undiscounted_price_currency, product, code, code_ean, series, parent, storno_item)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'product' => 'int',
        'unit' => 'string',
        'name' => 'string',
        'description' => 'string',
        'quantity' => 'string',
        'code' => 'string',
        'code_ean' => 'string',
        'series' => 'string',
        'tax' => 'string',
        'price' => 'string',
        'discount' => 'string',
        'is_discount' => 'bool',
        'subtotal' => 'string',
        'tax_value' => 'string',
        'total' => 'string',
        'discounted_value' => 'string',
        'discounted_tax_value' => 'string',
        'discount_subtotal' => 'string',
        'discount_tax_value' => 'string',
        'price_currency' => 'string',
        'subtotal_currency' => 'string',
        'tax_value_currency' => 'string',
        'total_currency' => 'string',
        'discounted_value_currency' => 'string',
        'discounted_tax_value_currency' => 'string',
        'discount_subtotal_currency' => 'string',
        'discount_tax_value_currency' => 'string',
        'storno_item' => 'int',
        'undiscounted_price' => 'string',
        'undiscounted_price_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'product' => null,
        'unit' => null,
        'name' => null,
        'description' => null,
        'quantity' => 'decimal',
        'code' => null,
        'code_ean' => null,
        'series' => null,
        'tax' => 'decimal',
        'price' => 'decimal',
        'discount' => 'decimal',
        'is_discount' => null,
        'subtotal' => 'decimal',
        'tax_value' => 'decimal',
        'total' => 'decimal',
        'discounted_value' => 'decimal',
        'discounted_tax_value' => 'decimal',
        'discount_subtotal' => 'decimal',
        'discount_tax_value' => 'decimal',
        'price_currency' => 'decimal',
        'subtotal_currency' => 'decimal',
        'tax_value_currency' => 'decimal',
        'total_currency' => 'decimal',
        'discounted_value_currency' => 'decimal',
        'discounted_tax_value_currency' => 'decimal',
        'discount_subtotal_currency' => 'decimal',
        'discount_tax_value_currency' => 'decimal',
        'storno_item' => null,
        'undiscounted_price' => 'decimal',
        'undiscounted_price_currency' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product' => 'product',
        'unit' => 'unit',
        'name' => 'name',
        'description' => 'description',
        'quantity' => 'quantity',
        'code' => 'code',
        'code_ean' => 'code_ean',
        'series' => 'series',
        'tax' => 'tax',
        'price' => 'price',
        'discount' => 'discount',
        'is_discount' => 'is_discount',
        'subtotal' => 'subtotal',
        'tax_value' => 'tax_value',
        'total' => 'total',
        'discounted_value' => 'discounted_value',
        'discounted_tax_value' => 'discounted_tax_value',
        'discount_subtotal' => 'discount_subtotal',
        'discount_tax_value' => 'discount_tax_value',
        'price_currency' => 'price_currency',
        'subtotal_currency' => 'subtotal_currency',
        'tax_value_currency' => 'tax_value_currency',
        'total_currency' => 'total_currency',
        'discounted_value_currency' => 'discounted_value_currency',
        'discounted_tax_value_currency' => 'discounted_tax_value_currency',
        'discount_subtotal_currency' => 'discount_subtotal_currency',
        'discount_tax_value_currency' => 'discount_tax_value_currency',
        'storno_item' => 'storno_item',
        'undiscounted_price' => 'undiscounted_price',
        'undiscounted_price_currency' => 'undiscounted_price_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product' => 'setProduct',
        'unit' => 'setUnit',
        'name' => 'setName',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'code' => 'setCode',
        'code_ean' => 'setCodeEan',
        'series' => 'setSeries',
        'tax' => 'setTax',
        'price' => 'setPrice',
        'discount' => 'setDiscount',
        'is_discount' => 'setIsDiscount',
        'subtotal' => 'setSubtotal',
        'tax_value' => 'setTaxValue',
        'total' => 'setTotal',
        'discounted_value' => 'setDiscountedValue',
        'discounted_tax_value' => 'setDiscountedTaxValue',
        'discount_subtotal' => 'setDiscountSubtotal',
        'discount_tax_value' => 'setDiscountTaxValue',
        'price_currency' => 'setPriceCurrency',
        'subtotal_currency' => 'setSubtotalCurrency',
        'tax_value_currency' => 'setTaxValueCurrency',
        'total_currency' => 'setTotalCurrency',
        'discounted_value_currency' => 'setDiscountedValueCurrency',
        'discounted_tax_value_currency' => 'setDiscountedTaxValueCurrency',
        'discount_subtotal_currency' => 'setDiscountSubtotalCurrency',
        'discount_tax_value_currency' => 'setDiscountTaxValueCurrency',
        'storno_item' => 'setStornoItem',
        'undiscounted_price' => 'setUndiscountedPrice',
        'undiscounted_price_currency' => 'setUndiscountedPriceCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product' => 'getProduct',
        'unit' => 'getUnit',
        'name' => 'getName',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'code' => 'getCode',
        'code_ean' => 'getCodeEan',
        'series' => 'getSeries',
        'tax' => 'getTax',
        'price' => 'getPrice',
        'discount' => 'getDiscount',
        'is_discount' => 'getIsDiscount',
        'subtotal' => 'getSubtotal',
        'tax_value' => 'getTaxValue',
        'total' => 'getTotal',
        'discounted_value' => 'getDiscountedValue',
        'discounted_tax_value' => 'getDiscountedTaxValue',
        'discount_subtotal' => 'getDiscountSubtotal',
        'discount_tax_value' => 'getDiscountTaxValue',
        'price_currency' => 'getPriceCurrency',
        'subtotal_currency' => 'getSubtotalCurrency',
        'tax_value_currency' => 'getTaxValueCurrency',
        'total_currency' => 'getTotalCurrency',
        'discounted_value_currency' => 'getDiscountedValueCurrency',
        'discounted_tax_value_currency' => 'getDiscountedTaxValueCurrency',
        'discount_subtotal_currency' => 'getDiscountSubtotalCurrency',
        'discount_tax_value_currency' => 'getDiscountTaxValueCurrency',
        'storno_item' => 'getStornoItem',
        'undiscounted_price' => 'getUndiscountedPrice',
        'undiscounted_price_currency' => 'getUndiscountedPriceCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['code_ean'] = isset($data['code_ean']) ? $data['code_ean'] : null;
        $this->container['series'] = isset($data['series']) ? $data['series'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['is_discount'] = isset($data['is_discount']) ? $data['is_discount'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['tax_value'] = isset($data['tax_value']) ? $data['tax_value'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['discounted_value'] = isset($data['discounted_value']) ? $data['discounted_value'] : null;
        $this->container['discounted_tax_value'] = isset($data['discounted_tax_value']) ? $data['discounted_tax_value'] : null;
        $this->container['discount_subtotal'] = isset($data['discount_subtotal']) ? $data['discount_subtotal'] : null;
        $this->container['discount_tax_value'] = isset($data['discount_tax_value']) ? $data['discount_tax_value'] : null;
        $this->container['price_currency'] = isset($data['price_currency']) ? $data['price_currency'] : null;
        $this->container['subtotal_currency'] = isset($data['subtotal_currency']) ? $data['subtotal_currency'] : null;
        $this->container['tax_value_currency'] = isset($data['tax_value_currency']) ? $data['tax_value_currency'] : null;
        $this->container['total_currency'] = isset($data['total_currency']) ? $data['total_currency'] : null;
        $this->container['discounted_value_currency'] = isset($data['discounted_value_currency']) ? $data['discounted_value_currency'] : null;
        $this->container['discounted_tax_value_currency'] = isset($data['discounted_tax_value_currency']) ? $data['discounted_tax_value_currency'] : null;
        $this->container['discount_subtotal_currency'] = isset($data['discount_subtotal_currency']) ? $data['discount_subtotal_currency'] : null;
        $this->container['discount_tax_value_currency'] = isset($data['discount_tax_value_currency']) ? $data['discount_tax_value_currency'] : null;
        $this->container['storno_item'] = isset($data['storno_item']) ? $data['storno_item'] : null;
        $this->container['undiscounted_price'] = isset($data['undiscounted_price']) ? $data['undiscounted_price'] : null;
        $this->container['undiscounted_price_currency'] = isset($data['undiscounted_price_currency']) ? $data['undiscounted_price_currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) > 20)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['unit']) && (mb_strlen($this->container['unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 200)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['code_ean']) && (mb_strlen($this->container['code_ean']) > 200)) {
            $invalidProperties[] = "invalid value for 'code_ean', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['series']) && (mb_strlen($this->container['series']) > 200)) {
            $invalidProperties[] = "invalid value for 'series', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        if ($this->container['price_currency'] === null) {
            $invalidProperties[] = "'price_currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return int
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param int $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        if (!is_null($unit) && (mb_strlen($unit) > 20)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling SupplierItemModel., must be smaller than or equal to 20.');
        }
        if (!is_null($unit) && (mb_strlen($unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit when calling SupplierItemModel., must be bigger than or equal to 1.');
        }

        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SupplierItemModel., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SupplierItemModel., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 200)) {
            throw new \InvalidArgumentException('invalid length for $code when calling SupplierItemModel., must be smaller than or equal to 200.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets code_ean
     *
     * @return string
     */
    public function getCodeEan()
    {
        return $this->container['code_ean'];
    }

    /**
     * Sets code_ean
     *
     * @param string $code_ean code_ean
     *
     * @return $this
     */
    public function setCodeEan($code_ean)
    {
        if (!is_null($code_ean) && (mb_strlen($code_ean) > 200)) {
            throw new \InvalidArgumentException('invalid length for $code_ean when calling SupplierItemModel., must be smaller than or equal to 200.');
        }

        $this->container['code_ean'] = $code_ean;

        return $this;
    }

    /**
     * Gets series
     *
     * @return string
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param string $series series
     *
     * @return $this
     */
    public function setSeries($series)
    {
        if (!is_null($series) && (mb_strlen($series) > 200)) {
            throw new \InvalidArgumentException('invalid length for $series when calling SupplierItemModel., must be smaller than or equal to 200.');
        }

        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax Procentaj TVA, aplicat dacă este plătitor de TVA.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Preț RON cu reducere/fără reducere
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets is_discount
     *
     * @return bool
     */
    public function getIsDiscount()
    {
        return $this->container['is_discount'];
    }

    /**
     * Sets is_discount
     *
     * @param bool $is_discount Dacă este aplicat deja un discount
     *
     * @return $this
     */
    public function setIsDiscount($is_discount)
    {
        $this->container['is_discount'] = $is_discount;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal Subtotal RON cu reducere/fără reducere
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax_value
     *
     * @return string
     */
    public function getTaxValue()
    {
        return $this->container['tax_value'];
    }

    /**
     * Sets tax_value
     *
     * @param string $tax_value TVA RON cu reducere/fără reducere
     *
     * @return $this
     */
    public function setTaxValue($tax_value)
    {
        $this->container['tax_value'] = $tax_value;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total Total RON cu reducere/fără reducere
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets discounted_value
     *
     * @return string
     */
    public function getDiscountedValue()
    {
        return $this->container['discounted_value'];
    }

    /**
     * Sets discounted_value
     *
     * @param string $discounted_value Reprezintă valoarea reducerii
     *
     * @return $this
     */
    public function setDiscountedValue($discounted_value)
    {
        $this->container['discounted_value'] = $discounted_value;

        return $this;
    }

    /**
     * Gets discounted_tax_value
     *
     * @return string
     */
    public function getDiscountedTaxValue()
    {
        return $this->container['discounted_tax_value'];
    }

    /**
     * Sets discounted_tax_value
     *
     * @param string $discounted_tax_value Reprezintă valoarea reducerii
     *
     * @return $this
     */
    public function setDiscountedTaxValue($discounted_tax_value)
    {
        $this->container['discounted_tax_value'] = $discounted_tax_value;

        return $this;
    }

    /**
     * Gets discount_subtotal
     *
     * @return string
     */
    public function getDiscountSubtotal()
    {
        return $this->container['discount_subtotal'];
    }

    /**
     * Sets discount_subtotal
     *
     * @param string $discount_subtotal Valoarea întreagă, se completează dacă avem discount
     *
     * @return $this
     */
    public function setDiscountSubtotal($discount_subtotal)
    {
        $this->container['discount_subtotal'] = $discount_subtotal;

        return $this;
    }

    /**
     * Gets discount_tax_value
     *
     * @return string
     */
    public function getDiscountTaxValue()
    {
        return $this->container['discount_tax_value'];
    }

    /**
     * Sets discount_tax_value
     *
     * @param string $discount_tax_value Valoarea întreagă, se completează dacă avem discount
     *
     * @return $this
     */
    public function setDiscountTaxValue($discount_tax_value)
    {
        $this->container['discount_tax_value'] = $discount_tax_value;

        return $this;
    }

    /**
     * Gets price_currency
     *
     * @return string
     */
    public function getPriceCurrency()
    {
        return $this->container['price_currency'];
    }

    /**
     * Sets price_currency
     *
     * @param string $price_currency Preț valută cu reducere/fără reducere
     *
     * @return $this
     */
    public function setPriceCurrency($price_currency)
    {
        $this->container['price_currency'] = $price_currency;

        return $this;
    }

    /**
     * Gets subtotal_currency
     *
     * @return string
     */
    public function getSubtotalCurrency()
    {
        return $this->container['subtotal_currency'];
    }

    /**
     * Sets subtotal_currency
     *
     * @param string $subtotal_currency Subtotal valută cu reducere/fără reducere
     *
     * @return $this
     */
    public function setSubtotalCurrency($subtotal_currency)
    {
        $this->container['subtotal_currency'] = $subtotal_currency;

        return $this;
    }

    /**
     * Gets tax_value_currency
     *
     * @return string
     */
    public function getTaxValueCurrency()
    {
        return $this->container['tax_value_currency'];
    }

    /**
     * Sets tax_value_currency
     *
     * @param string $tax_value_currency TVA valută cu reducere/fără reducere
     *
     * @return $this
     */
    public function setTaxValueCurrency($tax_value_currency)
    {
        $this->container['tax_value_currency'] = $tax_value_currency;

        return $this;
    }

    /**
     * Gets total_currency
     *
     * @return string
     */
    public function getTotalCurrency()
    {
        return $this->container['total_currency'];
    }

    /**
     * Sets total_currency
     *
     * @param string $total_currency Total valută cu reducere/fără reducere
     *
     * @return $this
     */
    public function setTotalCurrency($total_currency)
    {
        $this->container['total_currency'] = $total_currency;

        return $this;
    }

    /**
     * Gets discounted_value_currency
     *
     * @return string
     */
    public function getDiscountedValueCurrency()
    {
        return $this->container['discounted_value_currency'];
    }

    /**
     * Sets discounted_value_currency
     *
     * @param string $discounted_value_currency Reprezintă valoarea reducerii în valută
     *
     * @return $this
     */
    public function setDiscountedValueCurrency($discounted_value_currency)
    {
        $this->container['discounted_value_currency'] = $discounted_value_currency;

        return $this;
    }

    /**
     * Gets discounted_tax_value_currency
     *
     * @return string
     */
    public function getDiscountedTaxValueCurrency()
    {
        return $this->container['discounted_tax_value_currency'];
    }

    /**
     * Sets discounted_tax_value_currency
     *
     * @param string $discounted_tax_value_currency Reprezintă valoarea reducerii în valută
     *
     * @return $this
     */
    public function setDiscountedTaxValueCurrency($discounted_tax_value_currency)
    {
        $this->container['discounted_tax_value_currency'] = $discounted_tax_value_currency;

        return $this;
    }

    /**
     * Gets discount_subtotal_currency
     *
     * @return string
     */
    public function getDiscountSubtotalCurrency()
    {
        return $this->container['discount_subtotal_currency'];
    }

    /**
     * Sets discount_subtotal_currency
     *
     * @param string $discount_subtotal_currency Valoarea întreagă, se completează dacă avem discount
     *
     * @return $this
     */
    public function setDiscountSubtotalCurrency($discount_subtotal_currency)
    {
        $this->container['discount_subtotal_currency'] = $discount_subtotal_currency;

        return $this;
    }

    /**
     * Gets discount_tax_value_currency
     *
     * @return string
     */
    public function getDiscountTaxValueCurrency()
    {
        return $this->container['discount_tax_value_currency'];
    }

    /**
     * Sets discount_tax_value_currency
     *
     * @param string $discount_tax_value_currency Valoarea întreagă, se completează dacă avem discount
     *
     * @return $this
     */
    public function setDiscountTaxValueCurrency($discount_tax_value_currency)
    {
        $this->container['discount_tax_value_currency'] = $discount_tax_value_currency;

        return $this;
    }

    /**
     * Gets storno_item
     *
     * @return int
     */
    public function getStornoItem()
    {
        return $this->container['storno_item'];
    }

    /**
     * Sets storno_item
     *
     * @param int $storno_item storno_item
     *
     * @return $this
     */
    public function setStornoItem($storno_item)
    {
        $this->container['storno_item'] = $storno_item;

        return $this;
    }

    /**
     * Gets undiscounted_price
     *
     * @return string
     */
    public function getUndiscountedPrice()
    {
        return $this->container['undiscounted_price'];
    }

    /**
     * Sets undiscounted_price
     *
     * @param string $undiscounted_price Valoarea întreagă, se completează dacă avem reducere
     *
     * @return $this
     */
    public function setUndiscountedPrice($undiscounted_price)
    {
        $this->container['undiscounted_price'] = $undiscounted_price;

        return $this;
    }

    /**
     * Gets undiscounted_price_currency
     *
     * @return string
     */
    public function getUndiscountedPriceCurrency()
    {
        return $this->container['undiscounted_price_currency'];
    }

    /**
     * Sets undiscounted_price_currency
     *
     * @param string $undiscounted_price_currency Valoarea întreagă, se completează dacă avem reducere
     *
     * @return $this
     */
    public function setUndiscountedPriceCurrency($undiscounted_price_currency)
    {
        $this->container['undiscounted_price_currency'] = $undiscounted_price_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


