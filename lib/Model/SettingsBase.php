<?php
/**
 * SettingsBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SettingsBase Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettingsBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SettingsBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company' => '\Swagger\Client\Model\CompanySettings',
        'company_project' => '\Swagger\Client\Model\CompanyProjectSettings',
        'company_invoice' => '\Swagger\Client\Model\InvoiceSettings',
        'company_order' => '\Swagger\Client\Model\OrderSettings',
        'company_stock' => '\Swagger\Client\Model\StockSettings',
        'company_timesheet' => '\Swagger\Client\Model\TimeSheetSettings',
        'company_bank_statement' => '\Swagger\Client\Model\BankStatementSettings',
        'company_support' => '\Swagger\Client\Model\SupportSettings',
        'company_offer' => '\Swagger\Client\Model\OfferSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company' => null,
        'company_project' => null,
        'company_invoice' => null,
        'company_order' => null,
        'company_stock' => null,
        'company_timesheet' => null,
        'company_bank_statement' => null,
        'company_support' => null,
        'company_offer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company' => 'company',
        'company_project' => 'company_project',
        'company_invoice' => 'company_invoice',
        'company_order' => 'company_order',
        'company_stock' => 'company_stock',
        'company_timesheet' => 'company_timesheet',
        'company_bank_statement' => 'company_bank_statement',
        'company_support' => 'company_support',
        'company_offer' => 'company_offer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company' => 'setCompany',
        'company_project' => 'setCompanyProject',
        'company_invoice' => 'setCompanyInvoice',
        'company_order' => 'setCompanyOrder',
        'company_stock' => 'setCompanyStock',
        'company_timesheet' => 'setCompanyTimesheet',
        'company_bank_statement' => 'setCompanyBankStatement',
        'company_support' => 'setCompanySupport',
        'company_offer' => 'setCompanyOffer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company' => 'getCompany',
        'company_project' => 'getCompanyProject',
        'company_invoice' => 'getCompanyInvoice',
        'company_order' => 'getCompanyOrder',
        'company_stock' => 'getCompanyStock',
        'company_timesheet' => 'getCompanyTimesheet',
        'company_bank_statement' => 'getCompanyBankStatement',
        'company_support' => 'getCompanySupport',
        'company_offer' => 'getCompanyOffer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['company_project'] = isset($data['company_project']) ? $data['company_project'] : null;
        $this->container['company_invoice'] = isset($data['company_invoice']) ? $data['company_invoice'] : null;
        $this->container['company_order'] = isset($data['company_order']) ? $data['company_order'] : null;
        $this->container['company_stock'] = isset($data['company_stock']) ? $data['company_stock'] : null;
        $this->container['company_timesheet'] = isset($data['company_timesheet']) ? $data['company_timesheet'] : null;
        $this->container['company_bank_statement'] = isset($data['company_bank_statement']) ? $data['company_bank_statement'] : null;
        $this->container['company_support'] = isset($data['company_support']) ? $data['company_support'] : null;
        $this->container['company_offer'] = isset($data['company_offer']) ? $data['company_offer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company
     *
     * @return \Swagger\Client\Model\CompanySettings
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\Model\CompanySettings $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company_project
     *
     * @return \Swagger\Client\Model\CompanyProjectSettings
     */
    public function getCompanyProject()
    {
        return $this->container['company_project'];
    }

    /**
     * Sets company_project
     *
     * @param \Swagger\Client\Model\CompanyProjectSettings $company_project company_project
     *
     * @return $this
     */
    public function setCompanyProject($company_project)
    {
        $this->container['company_project'] = $company_project;

        return $this;
    }

    /**
     * Gets company_invoice
     *
     * @return \Swagger\Client\Model\InvoiceSettings
     */
    public function getCompanyInvoice()
    {
        return $this->container['company_invoice'];
    }

    /**
     * Sets company_invoice
     *
     * @param \Swagger\Client\Model\InvoiceSettings $company_invoice company_invoice
     *
     * @return $this
     */
    public function setCompanyInvoice($company_invoice)
    {
        $this->container['company_invoice'] = $company_invoice;

        return $this;
    }

    /**
     * Gets company_order
     *
     * @return \Swagger\Client\Model\OrderSettings
     */
    public function getCompanyOrder()
    {
        return $this->container['company_order'];
    }

    /**
     * Sets company_order
     *
     * @param \Swagger\Client\Model\OrderSettings $company_order company_order
     *
     * @return $this
     */
    public function setCompanyOrder($company_order)
    {
        $this->container['company_order'] = $company_order;

        return $this;
    }

    /**
     * Gets company_stock
     *
     * @return \Swagger\Client\Model\StockSettings
     */
    public function getCompanyStock()
    {
        return $this->container['company_stock'];
    }

    /**
     * Sets company_stock
     *
     * @param \Swagger\Client\Model\StockSettings $company_stock company_stock
     *
     * @return $this
     */
    public function setCompanyStock($company_stock)
    {
        $this->container['company_stock'] = $company_stock;

        return $this;
    }

    /**
     * Gets company_timesheet
     *
     * @return \Swagger\Client\Model\TimeSheetSettings
     */
    public function getCompanyTimesheet()
    {
        return $this->container['company_timesheet'];
    }

    /**
     * Sets company_timesheet
     *
     * @param \Swagger\Client\Model\TimeSheetSettings $company_timesheet company_timesheet
     *
     * @return $this
     */
    public function setCompanyTimesheet($company_timesheet)
    {
        $this->container['company_timesheet'] = $company_timesheet;

        return $this;
    }

    /**
     * Gets company_bank_statement
     *
     * @return \Swagger\Client\Model\BankStatementSettings
     */
    public function getCompanyBankStatement()
    {
        return $this->container['company_bank_statement'];
    }

    /**
     * Sets company_bank_statement
     *
     * @param \Swagger\Client\Model\BankStatementSettings $company_bank_statement company_bank_statement
     *
     * @return $this
     */
    public function setCompanyBankStatement($company_bank_statement)
    {
        $this->container['company_bank_statement'] = $company_bank_statement;

        return $this;
    }

    /**
     * Gets company_support
     *
     * @return \Swagger\Client\Model\SupportSettings
     */
    public function getCompanySupport()
    {
        return $this->container['company_support'];
    }

    /**
     * Sets company_support
     *
     * @param \Swagger\Client\Model\SupportSettings $company_support company_support
     *
     * @return $this
     */
    public function setCompanySupport($company_support)
    {
        $this->container['company_support'] = $company_support;

        return $this;
    }

    /**
     * Gets company_offer
     *
     * @return \Swagger\Client\Model\OfferSettings
     */
    public function getCompanyOffer()
    {
        return $this->container['company_offer'];
    }

    /**
     * Sets company_offer
     *
     * @param \Swagger\Client\Model\OfferSettings $company_offer company_offer
     *
     * @return $this
     */
    public function setCompanyOffer($company_offer)
    {
        $this->container['company_offer'] = $company_offer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


