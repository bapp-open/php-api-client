<?php
/**
 * NationalCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NationalCard Class Doc Comment
 *
 * @category Class
 * @description NationalCard(id, user, cnp, series, number, emitted_by, emitted_at, expires_at, address)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NationalCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NationalCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cnp' => 'string',
        'series' => 'string',
        'number' => 'string',
        'emitted_by' => 'string',
        'emitted_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'address' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cnp' => null,
        'series' => null,
        'number' => null,
        'emitted_by' => null,
        'emitted_at' => 'date',
        'expires_at' => 'date',
        'address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cnp' => 'cnp',
        'series' => 'series',
        'number' => 'number',
        'emitted_by' => 'emitted_by',
        'emitted_at' => 'emitted_at',
        'expires_at' => 'expires_at',
        'address' => 'address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cnp' => 'setCnp',
        'series' => 'setSeries',
        'number' => 'setNumber',
        'emitted_by' => 'setEmittedBy',
        'emitted_at' => 'setEmittedAt',
        'expires_at' => 'setExpiresAt',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cnp' => 'getCnp',
        'series' => 'getSeries',
        'number' => 'getNumber',
        'emitted_by' => 'getEmittedBy',
        'emitted_at' => 'getEmittedAt',
        'expires_at' => 'getExpiresAt',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cnp'] = isset($data['cnp']) ? $data['cnp'] : null;
        $this->container['series'] = isset($data['series']) ? $data['series'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['emitted_by'] = isset($data['emitted_by']) ? $data['emitted_by'] : null;
        $this->container['emitted_at'] = isset($data['emitted_at']) ? $data['emitted_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cnp'] === null) {
            $invalidProperties[] = "'cnp' can't be null";
        }
        if ((mb_strlen($this->container['cnp']) > 13)) {
            $invalidProperties[] = "invalid value for 'cnp', the character length must be smaller than or equal to 13.";
        }

        if ((mb_strlen($this->container['cnp']) < 1)) {
            $invalidProperties[] = "invalid value for 'cnp', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['series']) && (mb_strlen($this->container['series']) > 20)) {
            $invalidProperties[] = "invalid value for 'series', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 20)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['emitted_by']) && (mb_strlen($this->container['emitted_by']) > 200)) {
            $invalidProperties[] = "invalid value for 'emitted_by', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cnp
     *
     * @return string
     */
    public function getCnp()
    {
        return $this->container['cnp'];
    }

    /**
     * Sets cnp
     *
     * @param string $cnp cnp
     *
     * @return $this
     */
    public function setCnp($cnp)
    {
        if ((mb_strlen($cnp) > 13)) {
            throw new \InvalidArgumentException('invalid length for $cnp when calling NationalCard., must be smaller than or equal to 13.');
        }
        if ((mb_strlen($cnp) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cnp when calling NationalCard., must be bigger than or equal to 1.');
        }

        $this->container['cnp'] = $cnp;

        return $this;
    }

    /**
     * Gets series
     *
     * @return string
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param string $series series
     *
     * @return $this
     */
    public function setSeries($series)
    {
        if (!is_null($series) && (mb_strlen($series) > 20)) {
            throw new \InvalidArgumentException('invalid length for $series when calling NationalCard., must be smaller than or equal to 20.');
        }

        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $number when calling NationalCard., must be smaller than or equal to 20.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets emitted_by
     *
     * @return string
     */
    public function getEmittedBy()
    {
        return $this->container['emitted_by'];
    }

    /**
     * Sets emitted_by
     *
     * @param string $emitted_by emitted_by
     *
     * @return $this
     */
    public function setEmittedBy($emitted_by)
    {
        if (!is_null($emitted_by) && (mb_strlen($emitted_by) > 200)) {
            throw new \InvalidArgumentException('invalid length for $emitted_by when calling NationalCard., must be smaller than or equal to 200.');
        }

        $this->container['emitted_by'] = $emitted_by;

        return $this;
    }

    /**
     * Gets emitted_at
     *
     * @return \DateTime
     */
    public function getEmittedAt()
    {
        return $this->container['emitted_at'];
    }

    /**
     * Sets emitted_at
     *
     * @param \DateTime $emitted_at emitted_at
     *
     * @return $this
     */
    public function setEmittedAt($emitted_at)
    {
        $this->container['emitted_at'] = $emitted_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets address
     *
     * @return int
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param int $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


