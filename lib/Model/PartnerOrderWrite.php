<?php
/**
 * PartnerOrderWrite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PartnerOrderWrite Class Doc Comment
 *
 * @category Class
 * @description Order(id, created_at, modified_at, created_by, modified_by, snapshot, company, partner, currency, language, series, number, delivered_by, delivery_date, delivery_type, delivery_identifier, delivery_country, delivery_region, delivery_city, delivery_address, specific_date_time_requested, payment_type, uuid, date, status, source, source_text, discount, has_discount, subtotal, tax_value, total, discounted_total, subtotal_currency, tax_value_currency, total_currency, discounted_total_currency, exchange_rate, exchange_date, extra, external_partner, internal)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PartnerOrderWrite implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PartnerOrderWrite';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'partner_id' => 'int',
        'delivery_type' => 'int',
        'delivered_by' => 'string',
        'delivery_identifier' => 'string',
        'delivery_date' => '\DateTime',
        'delivery_country' => 'string',
        'delivery_region' => 'int',
        'delivery_city' => 'int',
        'delivery_address' => 'string',
        'specific_date_time_requested' => '\DateTime',
        'payment_type' => 'int',
        'status' => 'int',
        'date' => '\DateTime',
        'items' => '\Swagger\Client\Model\PartnerOrderItemModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'partner_id' => null,
        'delivery_type' => null,
        'delivered_by' => 'uuid',
        'delivery_identifier' => null,
        'delivery_date' => 'date-time',
        'delivery_country' => null,
        'delivery_region' => null,
        'delivery_city' => null,
        'delivery_address' => null,
        'specific_date_time_requested' => 'date-time',
        'payment_type' => null,
        'status' => null,
        'date' => 'date',
        'items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'partner_id' => 'partner_id',
        'delivery_type' => 'delivery_type',
        'delivered_by' => 'delivered_by',
        'delivery_identifier' => 'delivery_identifier',
        'delivery_date' => 'delivery_date',
        'delivery_country' => 'delivery_country',
        'delivery_region' => 'delivery_region',
        'delivery_city' => 'delivery_city',
        'delivery_address' => 'delivery_address',
        'specific_date_time_requested' => 'specific_date_time_requested',
        'payment_type' => 'payment_type',
        'status' => 'status',
        'date' => 'date',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'partner_id' => 'setPartnerId',
        'delivery_type' => 'setDeliveryType',
        'delivered_by' => 'setDeliveredBy',
        'delivery_identifier' => 'setDeliveryIdentifier',
        'delivery_date' => 'setDeliveryDate',
        'delivery_country' => 'setDeliveryCountry',
        'delivery_region' => 'setDeliveryRegion',
        'delivery_city' => 'setDeliveryCity',
        'delivery_address' => 'setDeliveryAddress',
        'specific_date_time_requested' => 'setSpecificDateTimeRequested',
        'payment_type' => 'setPaymentType',
        'status' => 'setStatus',
        'date' => 'setDate',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'partner_id' => 'getPartnerId',
        'delivery_type' => 'getDeliveryType',
        'delivered_by' => 'getDeliveredBy',
        'delivery_identifier' => 'getDeliveryIdentifier',
        'delivery_date' => 'getDeliveryDate',
        'delivery_country' => 'getDeliveryCountry',
        'delivery_region' => 'getDeliveryRegion',
        'delivery_city' => 'getDeliveryCity',
        'delivery_address' => 'getDeliveryAddress',
        'specific_date_time_requested' => 'getSpecificDateTimeRequested',
        'payment_type' => 'getPaymentType',
        'status' => 'getStatus',
        'date' => 'getDate',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['delivered_by'] = isset($data['delivered_by']) ? $data['delivered_by'] : null;
        $this->container['delivery_identifier'] = isset($data['delivery_identifier']) ? $data['delivery_identifier'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['delivery_country'] = isset($data['delivery_country']) ? $data['delivery_country'] : null;
        $this->container['delivery_region'] = isset($data['delivery_region']) ? $data['delivery_region'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_address'] = isset($data['delivery_address']) ? $data['delivery_address'] : null;
        $this->container['specific_date_time_requested'] = isset($data['specific_date_time_requested']) ? $data['specific_date_time_requested'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partner_id'] === null) {
            $invalidProperties[] = "'partner_id' can't be null";
        }
        if (!is_null($this->container['delivery_identifier']) && (mb_strlen($this->container['delivery_identifier']) > 100)) {
            $invalidProperties[] = "invalid value for 'delivery_identifier', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['delivery_address']) && (mb_strlen($this->container['delivery_address']) > 200)) {
            $invalidProperties[] = "invalid value for 'delivery_address', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_id
     *
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     *
     * @param int $partner_id partner_id
     *
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return int
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param int $delivery_type delivery_type
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type)
    {
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets delivered_by
     *
     * @return string
     */
    public function getDeliveredBy()
    {
        return $this->container['delivered_by'];
    }

    /**
     * Sets delivered_by
     *
     * @param string $delivered_by delivered_by
     *
     * @return $this
     */
    public function setDeliveredBy($delivered_by)
    {
        $this->container['delivered_by'] = $delivered_by;

        return $this;
    }

    /**
     * Gets delivery_identifier
     *
     * @return string
     */
    public function getDeliveryIdentifier()
    {
        return $this->container['delivery_identifier'];
    }

    /**
     * Sets delivery_identifier
     *
     * @param string $delivery_identifier delivery_identifier
     *
     * @return $this
     */
    public function setDeliveryIdentifier($delivery_identifier)
    {
        if (!is_null($delivery_identifier) && (mb_strlen($delivery_identifier) > 100)) {
            throw new \InvalidArgumentException('invalid length for $delivery_identifier when calling PartnerOrderWrite., must be smaller than or equal to 100.');
        }

        $this->container['delivery_identifier'] = $delivery_identifier;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets delivery_country
     *
     * @return string
     */
    public function getDeliveryCountry()
    {
        return $this->container['delivery_country'];
    }

    /**
     * Sets delivery_country
     *
     * @param string $delivery_country delivery_country
     *
     * @return $this
     */
    public function setDeliveryCountry($delivery_country)
    {
        $this->container['delivery_country'] = $delivery_country;

        return $this;
    }

    /**
     * Gets delivery_region
     *
     * @return int
     */
    public function getDeliveryRegion()
    {
        return $this->container['delivery_region'];
    }

    /**
     * Sets delivery_region
     *
     * @param int $delivery_region delivery_region
     *
     * @return $this
     */
    public function setDeliveryRegion($delivery_region)
    {
        $this->container['delivery_region'] = $delivery_region;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return int
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param int $delivery_city delivery_city
     *
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return string
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param string $delivery_address delivery_address
     *
     * @return $this
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (!is_null($delivery_address) && (mb_strlen($delivery_address) > 200)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address when calling PartnerOrderWrite., must be smaller than or equal to 200.');
        }

        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets specific_date_time_requested
     *
     * @return \DateTime
     */
    public function getSpecificDateTimeRequested()
    {
        return $this->container['specific_date_time_requested'];
    }

    /**
     * Sets specific_date_time_requested
     *
     * @param \DateTime $specific_date_time_requested specific_date_time_requested
     *
     * @return $this
     */
    public function setSpecificDateTimeRequested($specific_date_time_requested)
    {
        $this->container['specific_date_time_requested'] = $specific_date_time_requested;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return int
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param int $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\PartnerOrderItemModel[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\PartnerOrderItemModel[] $items 
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


