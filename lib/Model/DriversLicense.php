<?php
/**
 * DriversLicense
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DriversLicense Class Doc Comment
 *
 * @category Class
 * @description DriversLicense(id, created_at, modified_at, user, release_date, expiration_date, issued_by, permit_number, categories)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DriversLicense implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DriversLicense';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'release_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'issued_by' => 'string',
        'permit_number' => 'string',
        'categories' => '\Swagger\Client\Model\DriversLicenseCategory[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'release_date' => 'date',
        'expiration_date' => 'date',
        'issued_by' => null,
        'permit_number' => null,
        'categories' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'release_date' => 'release_date',
        'expiration_date' => 'expiration_date',
        'issued_by' => 'issued_by',
        'permit_number' => 'permit_number',
        'categories' => 'categories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'release_date' => 'setReleaseDate',
        'expiration_date' => 'setExpirationDate',
        'issued_by' => 'setIssuedBy',
        'permit_number' => 'setPermitNumber',
        'categories' => 'setCategories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'release_date' => 'getReleaseDate',
        'expiration_date' => 'getExpirationDate',
        'issued_by' => 'getIssuedBy',
        'permit_number' => 'getPermitNumber',
        'categories' => 'getCategories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['issued_by'] = isset($data['issued_by']) ? $data['issued_by'] : null;
        $this->container['permit_number'] = isset($data['permit_number']) ? $data['permit_number'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['release_date'] === null) {
            $invalidProperties[] = "'release_date' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        if ($this->container['issued_by'] === null) {
            $invalidProperties[] = "'issued_by' can't be null";
        }
        if ((mb_strlen($this->container['issued_by']) > 200)) {
            $invalidProperties[] = "invalid value for 'issued_by', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['issued_by']) < 1)) {
            $invalidProperties[] = "invalid value for 'issued_by', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['permit_number'] === null) {
            $invalidProperties[] = "'permit_number' can't be null";
        }
        if ((mb_strlen($this->container['permit_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'permit_number', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['permit_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'permit_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return \DateTime
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param \DateTime $release_date release_date
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets issued_by
     *
     * @return string
     */
    public function getIssuedBy()
    {
        return $this->container['issued_by'];
    }

    /**
     * Sets issued_by
     *
     * @param string $issued_by issued_by
     *
     * @return $this
     */
    public function setIssuedBy($issued_by)
    {
        if ((mb_strlen($issued_by) > 200)) {
            throw new \InvalidArgumentException('invalid length for $issued_by when calling DriversLicense., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($issued_by) < 1)) {
            throw new \InvalidArgumentException('invalid length for $issued_by when calling DriversLicense., must be bigger than or equal to 1.');
        }

        $this->container['issued_by'] = $issued_by;

        return $this;
    }

    /**
     * Gets permit_number
     *
     * @return string
     */
    public function getPermitNumber()
    {
        return $this->container['permit_number'];
    }

    /**
     * Sets permit_number
     *
     * @param string $permit_number permit_number
     *
     * @return $this
     */
    public function setPermitNumber($permit_number)
    {
        if ((mb_strlen($permit_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $permit_number when calling DriversLicense., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($permit_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $permit_number when calling DriversLicense., must be bigger than or equal to 1.');
        }

        $this->container['permit_number'] = $permit_number;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Swagger\Client\Model\DriversLicenseCategory[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Swagger\Client\Model\DriversLicenseCategory[] $categories 
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


