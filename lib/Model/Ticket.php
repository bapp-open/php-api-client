<?php
/**
 * Ticket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Ticket Class Doc Comment
 *
 * @category Class
 * @description Ticket(id, created_at, modified_at, company, created_by, source, source_custom, priority, queue, partner, status, owner, resolved, closed, on_hold, internal_notes, title, issue, resolution, child_of, identifier, owners)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Ticket implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'source' => 'int',
        'source_custom' => 'string',
        'priority' => 'int',
        'queue' => 'int',
        'partner' => 'int',
        'status' => 'int',
        'owner' => 'int',
        'resolved' => 'bool',
        'closed' => 'bool',
        'on_hold' => 'bool',
        'internal_notes' => 'string',
        'tags' => 'int[]',
        'title' => 'string',
        'issue' => 'string',
        'resolution' => 'string',
        'identifier' => 'string',
        'messages' => 'string',
        'created_at' => '\DateTime',
        'created_by' => 'string',
        'files' => 'string[]',
        'attachments' => 'string',
        'can_edit' => 'string',
        'can_delete_before' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'source' => null,
        'source_custom' => null,
        'priority' => null,
        'queue' => null,
        'partner' => null,
        'status' => null,
        'owner' => null,
        'resolved' => null,
        'closed' => null,
        'on_hold' => null,
        'internal_notes' => null,
        'tags' => null,
        'title' => null,
        'issue' => null,
        'resolution' => null,
        'identifier' => 'uuid',
        'messages' => null,
        'created_at' => 'date-time',
        'created_by' => null,
        'files' => 'uri',
        'attachments' => null,
        'can_edit' => null,
        'can_delete_before' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'source' => 'source',
        'source_custom' => 'source_custom',
        'priority' => 'priority',
        'queue' => 'queue',
        'partner' => 'partner',
        'status' => 'status',
        'owner' => 'owner',
        'resolved' => 'resolved',
        'closed' => 'closed',
        'on_hold' => 'on_hold',
        'internal_notes' => 'internal_notes',
        'tags' => 'tags',
        'title' => 'title',
        'issue' => 'issue',
        'resolution' => 'resolution',
        'identifier' => 'identifier',
        'messages' => 'messages',
        'created_at' => 'created_at',
        'created_by' => 'created_by',
        'files' => 'files',
        'attachments' => 'attachments',
        'can_edit' => 'can_edit',
        'can_delete_before' => 'can_delete_before'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source' => 'setSource',
        'source_custom' => 'setSourceCustom',
        'priority' => 'setPriority',
        'queue' => 'setQueue',
        'partner' => 'setPartner',
        'status' => 'setStatus',
        'owner' => 'setOwner',
        'resolved' => 'setResolved',
        'closed' => 'setClosed',
        'on_hold' => 'setOnHold',
        'internal_notes' => 'setInternalNotes',
        'tags' => 'setTags',
        'title' => 'setTitle',
        'issue' => 'setIssue',
        'resolution' => 'setResolution',
        'identifier' => 'setIdentifier',
        'messages' => 'setMessages',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'files' => 'setFiles',
        'attachments' => 'setAttachments',
        'can_edit' => 'setCanEdit',
        'can_delete_before' => 'setCanDeleteBefore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source' => 'getSource',
        'source_custom' => 'getSourceCustom',
        'priority' => 'getPriority',
        'queue' => 'getQueue',
        'partner' => 'getPartner',
        'status' => 'getStatus',
        'owner' => 'getOwner',
        'resolved' => 'getResolved',
        'closed' => 'getClosed',
        'on_hold' => 'getOnHold',
        'internal_notes' => 'getInternalNotes',
        'tags' => 'getTags',
        'title' => 'getTitle',
        'issue' => 'getIssue',
        'resolution' => 'getResolution',
        'identifier' => 'getIdentifier',
        'messages' => 'getMessages',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'files' => 'getFiles',
        'attachments' => 'getAttachments',
        'can_edit' => 'getCanEdit',
        'can_delete_before' => 'getCanDeleteBefore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_custom'] = isset($data['source_custom']) ? $data['source_custom'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['resolved'] = isset($data['resolved']) ? $data['resolved'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['on_hold'] = isset($data['on_hold']) ? $data['on_hold'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['issue'] = isset($data['issue']) ? $data['issue'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_delete_before'] = isset($data['can_delete_before']) ? $data['can_delete_before'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['source_custom']) && (mb_strlen($this->container['source_custom']) > 200)) {
            $invalidProperties[] = "invalid value for 'source_custom', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['queue'] === null) {
            $invalidProperties[] = "'queue' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 200)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['issue'] === null) {
            $invalidProperties[] = "'issue' can't be null";
        }
        if ((mb_strlen($this->container['issue']) < 1)) {
            $invalidProperties[] = "invalid value for 'issue', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['resolution']) && (mb_strlen($this->container['resolution']) < 1)) {
            $invalidProperties[] = "invalid value for 'resolution', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return int
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param int $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_custom
     *
     * @return string
     */
    public function getSourceCustom()
    {
        return $this->container['source_custom'];
    }

    /**
     * Sets source_custom
     *
     * @param string $source_custom source_custom
     *
     * @return $this
     */
    public function setSourceCustom($source_custom)
    {
        if (!is_null($source_custom) && (mb_strlen($source_custom) > 200)) {
            throw new \InvalidArgumentException('invalid length for $source_custom when calling Ticket., must be smaller than or equal to 200.');
        }

        $this->container['source_custom'] = $source_custom;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return int
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param int $queue queue
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return int
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param int $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return int
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param int $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets resolved
     *
     * @return bool
     */
    public function getResolved()
    {
        return $this->container['resolved'];
    }

    /**
     * Sets resolved
     *
     * @param bool $resolved resolved
     *
     * @return $this
     */
    public function setResolved($resolved)
    {
        $this->container['resolved'] = $resolved;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed closed
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return bool
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param bool $on_hold on_hold
     *
     * @return $this
     */
    public function setOnHold($on_hold)
    {
        $this->container['on_hold'] = $on_hold;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string $internal_notes internal_notes
     *
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return int[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param int[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 200)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Ticket., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Ticket., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return string
     */
    public function getIssue()
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param string $issue issue
     *
     * @return $this
     */
    public function setIssue($issue)
    {

        if ((mb_strlen($issue) < 1)) {
            throw new \InvalidArgumentException('invalid length for $issue when calling Ticket., must be bigger than or equal to 1.');
        }

        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string $resolution resolution
     *
     * @return $this
     */
    public function setResolution($resolution)
    {

        if (!is_null($resolution) && (mb_strlen($resolution) < 1)) {
            throw new \InvalidArgumentException('invalid length for $resolution when calling Ticket., must be bigger than or equal to 1.');
        }

        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return string
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param string $messages messages
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which this record was added
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets files
     *
     * @return string[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string[] $files 
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return string
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param string $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return string
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param string $can_edit can_edit
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete_before
     *
     * @return string
     */
    public function getCanDeleteBefore()
    {
        return $this->container['can_delete_before'];
    }

    /**
     * Sets can_delete_before
     *
     * @param string $can_delete_before can_delete_before
     *
     * @return $this
     */
    public function setCanDeleteBefore($can_delete_before)
    {
        $this->container['can_delete_before'] = $can_delete_before;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


