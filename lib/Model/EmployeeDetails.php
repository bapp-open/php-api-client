<?php
/**
 * EmployeeDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeDetails Class Doc Comment
 *
 * @category Class
 * @description EmployeeDetails(id, company, country, region, city, address, employee, citizenship, date_of_birth, job_title, identity_document, id_number, extra, work_approval, approval_start, approval_end)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employee' => 'int',
        'citizenship' => 'string',
        'identity_document' => 'int',
        'id_number' => 'string',
        'extra' => 'string',
        'work_approval' => 'int',
        'approval_start' => '\DateTime',
        'approval_end' => '\DateTime',
        'country' => 'string',
        'region' => 'int',
        'city' => 'int',
        'address' => 'string',
        'cnp_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employee' => null,
        'citizenship' => null,
        'identity_document' => null,
        'id_number' => null,
        'extra' => null,
        'work_approval' => null,
        'approval_start' => 'date',
        'approval_end' => 'date',
        'country' => null,
        'region' => null,
        'city' => null,
        'address' => null,
        'cnp_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee' => 'employee',
        'citizenship' => 'citizenship',
        'identity_document' => 'identity_document',
        'id_number' => 'id_number',
        'extra' => 'extra',
        'work_approval' => 'work_approval',
        'approval_start' => 'approval_start',
        'approval_end' => 'approval_end',
        'country' => 'country',
        'region' => 'region',
        'city' => 'city',
        'address' => 'address',
        'cnp_data' => 'cnp_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee' => 'setEmployee',
        'citizenship' => 'setCitizenship',
        'identity_document' => 'setIdentityDocument',
        'id_number' => 'setIdNumber',
        'extra' => 'setExtra',
        'work_approval' => 'setWorkApproval',
        'approval_start' => 'setApprovalStart',
        'approval_end' => 'setApprovalEnd',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'city' => 'setCity',
        'address' => 'setAddress',
        'cnp_data' => 'setCnpData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee' => 'getEmployee',
        'citizenship' => 'getCitizenship',
        'identity_document' => 'getIdentityDocument',
        'id_number' => 'getIdNumber',
        'extra' => 'getExtra',
        'work_approval' => 'getWorkApproval',
        'approval_start' => 'getApprovalStart',
        'approval_end' => 'getApprovalEnd',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'city' => 'getCity',
        'address' => 'getAddress',
        'cnp_data' => 'getCnpData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['citizenship'] = isset($data['citizenship']) ? $data['citizenship'] : null;
        $this->container['identity_document'] = isset($data['identity_document']) ? $data['identity_document'] : null;
        $this->container['id_number'] = isset($data['id_number']) ? $data['id_number'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['work_approval'] = isset($data['work_approval']) ? $data['work_approval'] : null;
        $this->container['approval_start'] = isset($data['approval_start']) ? $data['approval_start'] : null;
        $this->container['approval_end'] = isset($data['approval_end']) ? $data['approval_end'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['cnp_data'] = isset($data['cnp_data']) ? $data['cnp_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['employee'] === null) {
            $invalidProperties[] = "'employee' can't be null";
        }
        if ($this->container['citizenship'] === null) {
            $invalidProperties[] = "'citizenship' can't be null";
        }
        if ($this->container['identity_document'] === null) {
            $invalidProperties[] = "'identity_document' can't be null";
        }
        if ($this->container['id_number'] === null) {
            $invalidProperties[] = "'id_number' can't be null";
        }
        if ((mb_strlen($this->container['id_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'id_number', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['id_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'id_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['extra']) && (mb_strlen($this->container['extra']) > 500)) {
            $invalidProperties[] = "invalid value for 'extra', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ((mb_strlen($this->container['address']) > 200)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee
     *
     * @return int
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param int $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string $citizenship citizenship
     *
     * @return $this
     */
    public function setCitizenship($citizenship)
    {
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets identity_document
     *
     * @return int
     */
    public function getIdentityDocument()
    {
        return $this->container['identity_document'];
    }

    /**
     * Sets identity_document
     *
     * @param int $identity_document identity_document
     *
     * @return $this
     */
    public function setIdentityDocument($identity_document)
    {
        $this->container['identity_document'] = $identity_document;

        return $this;
    }

    /**
     * Gets id_number
     *
     * @return string
     */
    public function getIdNumber()
    {
        return $this->container['id_number'];
    }

    /**
     * Sets id_number
     *
     * @param string $id_number id_number
     *
     * @return $this
     */
    public function setIdNumber($id_number)
    {
        if ((mb_strlen($id_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $id_number when calling EmployeeDetails., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($id_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id_number when calling EmployeeDetails., must be bigger than or equal to 1.');
        }

        $this->container['id_number'] = $id_number;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string $extra extra
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        if (!is_null($extra) && (mb_strlen($extra) > 500)) {
            throw new \InvalidArgumentException('invalid length for $extra when calling EmployeeDetails., must be smaller than or equal to 500.');
        }

        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets work_approval
     *
     * @return int
     */
    public function getWorkApproval()
    {
        return $this->container['work_approval'];
    }

    /**
     * Sets work_approval
     *
     * @param int $work_approval work_approval
     *
     * @return $this
     */
    public function setWorkApproval($work_approval)
    {
        $this->container['work_approval'] = $work_approval;

        return $this;
    }

    /**
     * Gets approval_start
     *
     * @return \DateTime
     */
    public function getApprovalStart()
    {
        return $this->container['approval_start'];
    }

    /**
     * Sets approval_start
     *
     * @param \DateTime $approval_start approval_start
     *
     * @return $this
     */
    public function setApprovalStart($approval_start)
    {
        $this->container['approval_start'] = $approval_start;

        return $this;
    }

    /**
     * Gets approval_end
     *
     * @return \DateTime
     */
    public function getApprovalEnd()
    {
        return $this->container['approval_end'];
    }

    /**
     * Sets approval_end
     *
     * @param \DateTime $approval_end approval_end
     *
     * @return $this
     */
    public function setApprovalEnd($approval_end)
    {
        $this->container['approval_end'] = $approval_end;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return int
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param int $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets city
     *
     * @return int
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param int $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        if ((mb_strlen($address) > 200)) {
            throw new \InvalidArgumentException('invalid length for $address when calling EmployeeDetails., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling EmployeeDetails., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets cnp_data
     *
     * @return string
     */
    public function getCnpData()
    {
        return $this->container['cnp_data'];
    }

    /**
     * Sets cnp_data
     *
     * @param string $cnp_data cnp_data
     *
     * @return $this
     */
    public function setCnpData($cnp_data)
    {
        $this->container['cnp_data'] = $cnp_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


