<?php
/**
 * SelfTimesheetRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BAPP API
 *
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SelfTimesheetRequest Class Doc Comment
 *
 * @category Class
 * @description TimesheetRequest(id, company, created, employee, type, replacement, resolved_by, resolved_at, approved, request_details, resolved_details, start_period, end_period, timesheet)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SelfTimesheetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SelfTimesheetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'replacement' => 'int',
        'request_details' => 'string',
        'start_period' => '\DateTime',
        'end_period' => '\DateTime',
        'approved' => 'bool',
        'resolved_by' => 'string',
        'resolved_at' => '\DateTime',
        'resolved_details' => 'string',
        'period_working_days' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'replacement' => null,
        'request_details' => null,
        'start_period' => 'date-time',
        'end_period' => 'date-time',
        'approved' => null,
        'resolved_by' => null,
        'resolved_at' => 'date-time',
        'resolved_details' => null,
        'period_working_days' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'replacement' => 'replacement',
        'request_details' => 'request_details',
        'start_period' => 'start_period',
        'end_period' => 'end_period',
        'approved' => 'approved',
        'resolved_by' => 'resolved_by',
        'resolved_at' => 'resolved_at',
        'resolved_details' => 'resolved_details',
        'period_working_days' => 'period_working_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'replacement' => 'setReplacement',
        'request_details' => 'setRequestDetails',
        'start_period' => 'setStartPeriod',
        'end_period' => 'setEndPeriod',
        'approved' => 'setApproved',
        'resolved_by' => 'setResolvedBy',
        'resolved_at' => 'setResolvedAt',
        'resolved_details' => 'setResolvedDetails',
        'period_working_days' => 'setPeriodWorkingDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'replacement' => 'getReplacement',
        'request_details' => 'getRequestDetails',
        'start_period' => 'getStartPeriod',
        'end_period' => 'getEndPeriod',
        'approved' => 'getApproved',
        'resolved_by' => 'getResolvedBy',
        'resolved_at' => 'getResolvedAt',
        'resolved_details' => 'getResolvedDetails',
        'period_working_days' => 'getPeriodWorkingDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CM = 'CM';
    const TYPE_CO = 'CO';
    const TYPE_CFP = 'CFP';
    const TYPE_I = 'I';
    const TYPE_M = 'M';
    const TYPE_O = 'O';
    const TYPE_PRB = 'PRB';
    const TYPE_PRM = 'PRM';
    const TYPE_EV = 'EV';
    const TYPE_DT = 'DT';
    const TYPE_DS = 'DS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CM,
            self::TYPE_CO,
            self::TYPE_CFP,
            self::TYPE_I,
            self::TYPE_M,
            self::TYPE_O,
            self::TYPE_PRB,
            self::TYPE_PRM,
            self::TYPE_EV,
            self::TYPE_DT,
            self::TYPE_DS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['replacement'] = isset($data['replacement']) ? $data['replacement'] : null;
        $this->container['request_details'] = isset($data['request_details']) ? $data['request_details'] : null;
        $this->container['start_period'] = isset($data['start_period']) ? $data['start_period'] : null;
        $this->container['end_period'] = isset($data['end_period']) ? $data['end_period'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['resolved_by'] = isset($data['resolved_by']) ? $data['resolved_by'] : null;
        $this->container['resolved_at'] = isset($data['resolved_at']) ? $data['resolved_at'] : null;
        $this->container['resolved_details'] = isset($data['resolved_details']) ? $data['resolved_details'] : null;
        $this->container['period_working_days'] = isset($data['period_working_days']) ? $data['period_working_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['start_period'] === null) {
            $invalidProperties[] = "'start_period' can't be null";
        }
        if ($this->container['end_period'] === null) {
            $invalidProperties[] = "'end_period' can't be null";
        }
        if (!is_null($this->container['resolved_details']) && (mb_strlen($this->container['resolved_details']) < 1)) {
            $invalidProperties[] = "invalid value for 'resolved_details', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets replacement
     *
     * @return int
     */
    public function getReplacement()
    {
        return $this->container['replacement'];
    }

    /**
     * Sets replacement
     *
     * @param int $replacement replacement
     *
     * @return $this
     */
    public function setReplacement($replacement)
    {
        $this->container['replacement'] = $replacement;

        return $this;
    }

    /**
     * Gets request_details
     *
     * @return string
     */
    public function getRequestDetails()
    {
        return $this->container['request_details'];
    }

    /**
     * Sets request_details
     *
     * @param string $request_details request_details
     *
     * @return $this
     */
    public function setRequestDetails($request_details)
    {
        $this->container['request_details'] = $request_details;

        return $this;
    }

    /**
     * Gets start_period
     *
     * @return \DateTime
     */
    public function getStartPeriod()
    {
        return $this->container['start_period'];
    }

    /**
     * Sets start_period
     *
     * @param \DateTime $start_period start_period
     *
     * @return $this
     */
    public function setStartPeriod($start_period)
    {
        $this->container['start_period'] = $start_period;

        return $this;
    }

    /**
     * Gets end_period
     *
     * @return \DateTime
     */
    public function getEndPeriod()
    {
        return $this->container['end_period'];
    }

    /**
     * Sets end_period
     *
     * @param \DateTime $end_period end_period
     *
     * @return $this
     */
    public function setEndPeriod($end_period)
    {
        $this->container['end_period'] = $end_period;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets resolved_by
     *
     * @return string
     */
    public function getResolvedBy()
    {
        return $this->container['resolved_by'];
    }

    /**
     * Sets resolved_by
     *
     * @param string $resolved_by resolved_by
     *
     * @return $this
     */
    public function setResolvedBy($resolved_by)
    {
        $this->container['resolved_by'] = $resolved_by;

        return $this;
    }

    /**
     * Gets resolved_at
     *
     * @return \DateTime
     */
    public function getResolvedAt()
    {
        return $this->container['resolved_at'];
    }

    /**
     * Sets resolved_at
     *
     * @param \DateTime $resolved_at resolved_at
     *
     * @return $this
     */
    public function setResolvedAt($resolved_at)
    {
        $this->container['resolved_at'] = $resolved_at;

        return $this;
    }

    /**
     * Gets resolved_details
     *
     * @return string
     */
    public function getResolvedDetails()
    {
        return $this->container['resolved_details'];
    }

    /**
     * Sets resolved_details
     *
     * @param string $resolved_details resolved_details
     *
     * @return $this
     */
    public function setResolvedDetails($resolved_details)
    {

        if (!is_null($resolved_details) && (mb_strlen($resolved_details) < 1)) {
            throw new \InvalidArgumentException('invalid length for $resolved_details when calling SelfTimesheetRequest., must be bigger than or equal to 1.');
        }

        $this->container['resolved_details'] = $resolved_details;

        return $this;
    }

    /**
     * Gets period_working_days
     *
     * @return string
     */
    public function getPeriodWorkingDays()
    {
        return $this->container['period_working_days'];
    }

    /**
     * Sets period_working_days
     *
     * @param string $period_working_days period_working_days
     *
     * @return $this
     */
    public function setPeriodWorkingDays($period_working_days)
    {
        $this->container['period_working_days'] = $period_working_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


